[{"path":"/articles/get-started.html","id":"substring-first-n-elements","dir":"Articles","previous_headings":"","what":"Substring first n elements","title":"Get started","text":"","code":"a <- c(\"asdf\", \"bnmkk\") my_left(a, num = 3) #> [1] \"asd\" \"bnm\" a <- c(\"asdf\", \"bnmkk\") my_right(a, num = 3) #> [1] \"sdf\" \"mkk\" df <- data.frame(a = NA, b = c(1:3, NA), c = 0) drop_nas(df) #>    b c #> 1  1 0 #> 2  2 0 #> 3  3 0 #> 4 NA 0 drop_zeros(df) #>    a  b #> 1 NA  1 #> 2 NA  2 #> 3 NA  3 #> 4 NA NA"},{"path":"/articles/get-started.html","id":"clean-directoryfile-names","dir":"Articles","previous_headings":"","what":"clean directory/file names","title":"Get started","text":"Clean file names directory using clean_dir_name()","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") clean_dir_name(f) #> [1] \"uon-trial-1\""},{"path":"/articles/get-started.html","id":"list-files","dir":"Articles","previous_headings":"","what":"List files","title":"Get started","text":"List files directory using list_files()","code":"list_files(system.file(package = \"pbwrangler\"))[1:5] #> [1] \"C:/Users/BasilOkola/AppData/Local/R/win-library/4.3/pbwrangler/data\"        #> [2] \"C:/Users/BasilOkola/AppData/Local/R/win-library/4.3/pbwrangler/DESCRIPTION\" #> [3] \"C:/Users/BasilOkola/AppData/Local/R/win-library/4.3/pbwrangler/help\"        #> [4] \"C:/Users/BasilOkola/AppData/Local/R/win-library/4.3/pbwrangler/html\"        #> [5] \"C:/Users/BasilOkola/AppData/Local/R/win-library/4.3/pbwrangler/INDEX\""},{"path":"/articles/get-started.html","id":"compare-dataframes-to-find-shared-columns","dir":"Articles","previous_headings":"","what":"Compare dataframes to find shared columns","title":"Get started","text":"suspect two fieldbooks similar, can compare .","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir=NULL, file_to_read = f)[[1]] f1 <- system.file(\"uon-trial-1.xlsx\", package = \"pbwrangler\") df1 <- read_workbooks(dir=NULL, file_to_read = f, sheet_name = \"Sheet1\")[[1]] compare_df(df, df1) #>    dim_X  dim_Y design_X design_Y cols_not_X cols_not_Y #> 1 108,32 108,32     6*18     6*18"},{"path":"/articles/get-started.html","id":"merge-notesobs-to-one-column","dir":"Articles","previous_headings":"","what":"Merge notes/obs to one column","title":"Get started","text":"","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir=NULL, file_to_read = f)[[1]] merge_note_obs(df)[1:5, \"obs\"] #> [1] \"long oblong,,good yield\" \"very good yield\"         #> [3] \"buds, pinkish eyes\"      \"good yield\"              #> [5] NA"},{"path":"/articles/get-started.html","id":"create-a-meta-data-file-for-each-experiment-designed-during-a-season","dir":"Articles","previous_headings":"","what":"Create a meta-data file for each experiment designed during a season","title":"Get started","text":"Create meta-data accompany fieldbooks.","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir = NULL, file_to_read = f) create_meta_file(df, season = \"season-2024\", d_dir = tempdir()) #> $`season-2024` #> # A tibble: 1 × 17 #>   trial_name breeding_program location year  transplanting_date design_type #>   <lgl>      <lgl>            <chr>    <chr> <lgl>              <lgl>       #> 1 NA         NA               NA       2024  NA                 NA          #> # ℹ 11 more variables: description <lgl>, trial_type <lgl>, plot_width <lgl>, #> #   plot_length <lgl>, planting_date <date>, harvest_date <date>, #> #   number_of_plants_per_ridge <lgl>, number_of_ridges_per_plot <lgl>, #> #   space_between_ridges <lgl>, space_between_plants_in_ridges <lgl>, #> #   number_of_plants_per_plot <lgl>"},{"path":"/articles/get-started.html","id":"capture-trial-location","dir":"Articles","previous_headings":"","what":"Capture trial location","title":"Get started","text":"try capture trial location file names:","code":"f <- system.file(\"uon-trial-1.xlsx\", package = \"pbwrangler\") f1 <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\")  df <- read_workbooks(dir = NULL, file_to_read = f, sheet_name = \"Sheet 1\") df1 <- read_workbooks(dir = NULL, file_to_read = f1)  dat <- c(df, df1) # this has a loc variable dat_loc <- capture_location(dat) lapply(dat_loc, function(x) x$loc[1:5]) #> $`uon-trial-1` #> [1] \"uon-trial-1\" \"uon-trial-1\" \"uon-trial-1\" \"uon-trial-1\" \"uon-trial-1\" #>  #> $`uon-trial-1` #> [1] \"uon-trial-1\" \"uon-trial-1\" \"uon-trial-1\" \"uon-trial-1\" \"uon-trial-1\""},{"path":"/articles/get-started.html","id":"write-data","dir":"Articles","previous_headings":"","what":"write data","title":"Get started","text":"can write trial data using write_data():","code":"f <- system.file(\"uon-trial-1.xlsx\", package = \"pbwrangler\") f1 <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\")  df <- read_workbooks(dir = NULL, file_to_read = f, sheet_name = \"Sheet 1\") df1 <- read_workbooks(dir = NULL, file_to_read = f1) dat <- c(df, df1)  write_data(dir = tempdir(), data_list = dat, season = \"season-2024\")"},{"path":"/articles/get-started.html","id":"create-genotype-family-codes","dir":"Articles","previous_headings":"","what":"create genotype family codes","title":"Get started","text":"can also create family codes accession names using create_family_vars().","code":"f <- system.file(\"uon-trial-1.xlsx\", package = \"pbwrangler\") df <- read_workbooks(dir = NULL, file_to_read = f, sheet_name = \"Sheet 1\") %>%   capture_location(.) %>% `[[`(1)  create_family_vars(df)[1:5, ] #>            geno         loc old_family_code old_year_of_cross year_of_cross #> 1 CIP317004.001 uon-trial-1       CIP317004              2017          2021 #> 2 CIP317005.036 uon-trial-1       CIP317005              2017          2021 #> 3 CIP317007.103 uon-trial-1       CIP317007              2017          2021 #> 4 CIP317013.120 uon-trial-1       CIP317013              2017          2021 #> 5 CIP317026.004 uon-trial-1       CIP317026              2017          2021 #>   new_family_code  new_clone_id #> 1       CIP321004 CIP321004.001 #> 2       CIP321005 CIP321005.036 #> 3       CIP321007 CIP321007.103 #> 4       CIP321013 CIP321013.120 #> 5       CIP321026 CIP321026.004"},{"path":[]},{"path":[]},{"path":[]},{"path":"/articles/get-started.html","id":"recode-variables","dir":"Articles","previous_headings":"","what":"recode variables","title":"Get started","text":"Parse variables one type another using recode_var().","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir = NULL, file_to_read = f) %>% `[[`(1) df_c <- recode_var(df)"},{"path":"/articles/get-started.html","id":"run-routine-data-checks","dir":"Articles","previous_headings":"","what":"run routine data checks","title":"Get started","text":"Run data checks using st4gi package compute derived columns","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir = NULL, file_to_read = f) %>%   `[[`(1) df_checked <- run_checks(df)"},{"path":"/articles/get-started.html","id":"check-accession-names","dir":"Articles","previous_headings":"","what":"check accession names","title":"Get started","text":"Check accession names using check_geno().","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir = NULL, file_to_read = f)  df_checked <- check_geno(df)"},{"path":"/articles/get-started.html","id":"update-accession-names","dir":"Articles","previous_headings":"","what":"update accession names","title":"Get started","text":"Update accession names update_geno()","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir = NULL, file_to_read = f) %>%   `[[`(1) df_checked <- update_geno(df)"},{"path":"/articles/get-started.html","id":"rename-columns","dir":"Articles","previous_headings":"","what":"rename columns","title":"Get started","text":"Rename variables match ontology lables rename_cols()","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir = NULL, file_to_read = f) %>%   `[[`(1) df <- rename_cols(df)"},{"path":"/articles/get-started.html","id":"process-trial-data","dir":"Articles","previous_headings":"","what":"process trial data","title":"Get started","text":"Apply number data cleaning functions trial data pre_process_trials() number computed columns generated process.","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir = NULL, file_to_read = f)  df_out <- pre_process_trials(df) |> process_trials() %>%   purrr::map(., run_data_processes) purrr::map(df_out, names_df) #> $`uon-trial-1` #>  [1] \"atmw\"                \"atw\"                 \"col\"                 #>  [4] \"entry\"               \"flower_colour\"       \"flowering\"           #>  [7] \"flowering_date\"      \"geno\"                \"growth_speed\"        #> [10] \"late_blight_60_days\" \"mtwci\"               \"mtwcii\"              #> [13] \"mtwp\"                \"mtyna\"               \"nmtci\"               #> [16] \"nmtcii\"              \"nmtp\"                \"nnomtp\"              #> [19] \"nomtwp\"              \"npe\"                 \"ntp\"                 #> [22] \"obs\"                 \"overall_impression\"  \"pgh\"                 #> [25] \"photo\"               \"plant_unif\"          \"plant_vigor\"         #> [28] \"plot\"                \"ppe\"                 \"rep\"                 #> [31] \"row\"                 \"se\"                  \"tbfsh1\"              #> [34] \"tbskn1\"              \"tntp\"                \"ttwp\"                #> [37] \"ttyna\"               \"tub_size\"            \"tub_unif\"            #> [40] \"tuber_apper\"         \"unique\""},{"path":"/articles/get-started.html","id":"create-a-trial-design-object-for-row-col-design","dir":"Articles","previous_headings":"","what":"Create a trial design object for row-col design","title":"Get started","text":"Create trial design object, fit model extract predictions","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir = NULL, file_to_read = f) %>%   purrr::map(     ., ~dplyr::mutate(       ., year = \"2024\", loc = \"UON\", trial = \"lbht\"     )   ) df_out <- pre_process_trials(df) |> process_trials() %>%   purrr::map(., run_data_processes) %>% `[[`(1)  # trial design object TD <- create_td(df_out, design = \"rowcol\") # fit  fit_TD <- fit_td(TD, trait = \"mtwp\") # extract predictions  pred_TD <- extract_blups(fit_TD, pred = c(\"BLUEs\", \"seBLUEs\"))  pred_TD[[1]][1:5,] #>         genotype trial BLUEs_mtwp seBLUEs_mtwp #> 1  CIP312084.731  lbht  10.514036     1.187315 #> 2 CIP3177011.028  lbht  10.200466     1.462786 #> 3 CIP3177023.046  lbht   6.488979     1.239065 #> 4 CIP3177038.001  lbht   6.609805     2.149885 #> 5 CIP3217003.001  lbht  12.022090     1.451649"},{"path":"/articles/get-started.html","id":"get-invalid-column-names","dir":"Articles","previous_headings":"","what":"get in/valid column names","title":"Get started","text":"Get invalid columns (labels defined ontology)","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir = NULL, file_to_read = f) %>%   purrr::map(     ., ~dplyr::mutate(       ., year = \"2024\", loc = \"UON\", trial = \"lbht\"     )   ) df_out <- pre_process_trials(df) |> process_trials() %>%   purrr::map(., run_data_processes) %>% `[[`(1)   subset_invalid_cols(df_out) %>% colnames(.) #>  [1] \"geno\"                \"unique\"              \"entry\"               #>  [4] \"growth_speed\"        \"flowering_date\"      \"flower_colour\"       #>  [7] \"overall_impression\"  \"late_blight_60_days\" \"obs\"                 #> [10] \"photo\"               \"trial\""},{"path":[]},{"path":"/articles/get-started.html","id":"read-trial-data-files","dir":"Articles","previous_headings":"","what":"read trial data files","title":"Get started","text":"field trial randomization","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") d <- read_workbooks(dir = NULL, file_to_read = f) lapply(d, function(x) x[1:5, 1:5]) #> $`uon-trial-1` #>           unique plot          geno entry row #> 1 1CIP317004.001    1 CIP317004.001    12   1 #> 2 2CIP317005.036    2 CIP317005.036    14   2 #> 3 3CIP317007.103    3 CIP317007.103    20   3 #> 4 4CIP317013.120    4 CIP317013.120    23   4 #> 5 5CIP317026.004    5 CIP317026.004    28   5"},{"path":"/articles/get-started.html","id":"partially-replicated-prep-design","dir":"Articles","previous_headings":"","what":"partially replicated (prep) design","title":"Get started","text":"partially replicated randomization","code":"data(\"ilri\", package = \"pbwrangler\") ins_ilri <- geno_by_tubers(ilri) lapply(ins_ilri, head, 5) #> $geno_3 #> [1] \"CIP319020.009\" \"CIP319027.002\" \"CIP319027.003\" \"CIP319052.003\" #> [5] \"CIP319052.006\" #>  #> $geno_2 #> [1] \"CIP319008.002\" \"CIP319019.001\" \"CIP319020.004\" \"CIP319020.005\" #> [5] \"CIP319020.008\" #>  #> $geno_1 #> [1] \"CIP319020.003\" \"CIP319020.006\" \"CIP319020.007\" \"CIP319020.002\" #> [5] \"CIP319027.001\" d <- tempdir() data(\"ilri\", package = \"pbwrangler\") ins_ilri <- geno_by_tubers(ilri) ilri_prep <- rand_Prep(   tot = 53,   ins = ins_ilri,   rowD = 12,   trial = \"ilri\",   n_dummies = 5,   loc = \"ilri\",   totReps =96,   trtrepP = trial_design_meta()$trep,   trtgroup = trial_design_meta()$trgroup,   block_lst = trial_design_meta()$block_list,   path = NULL ) #>      Phase,    Search%,    A-measure #> [1] 1.0000000 0.0000000 0.2718985 #> [1]  1.0000000 10.0000000  0.2666667 #> [1]  1.0000000 20.0000000  0.2666667 #> [1]  1.0000000 30.0000000  0.2666667 #> [1]  1.0000000 40.0000000  0.2666667 #> [1]  1.0000000 50.0000000  0.2666667 #> [1]  1.0000000 60.0000000  0.2666667 #> [1]  1.0000000 70.0000000  0.2666667 #> [1]  1.0000000 80.0000000  0.2666667 #> [1]  1.0000000 90.0000000  0.2666667 #> [1]   1.0000000 100.0000000   0.2666667 #>  [1] 0.2666667 0.2666667 0.2666667 0.0000000 0.0000000 0.0000000 0.0000000 #>  [8] 0.0000000 0.0000000 0.0000000 #> 8 rows by 2 columns #>      Phase,    Search%,    A-measure #> [1] 2.0000000 0.0000000 0.2700262 #> [1]  2.0000000 10.0000000  0.2700262 #> [1]  2.0000000 20.0000000  0.2700262 #> [1]  2.0000000 30.0000000  0.2700262 #> [1]  2.0000000 40.0000000  0.2700262 #> [1]  2.0000000 50.0000000  0.2700262 #> [1]  2.0000000 60.0000000  0.2700262 #> [1]  2.0000000 70.0000000  0.2700262 #> [1]  2.0000000 80.0000000  0.2700262 #> [1]  2.0000000 90.0000000  0.2700262 #> [1]   2.0000000 100.0000000   0.2700262 #>  [1] 0.2666667 0.2834646 0.2700262 0.0000000 0.0000000 0.0000000 0.0000000 #>  [8] 0.0000000 0.0000000 0.0000000 #>      Phase,    Search%,    A-measure #> [1] 1.0000000 0.0000000 0.7591574 #> [1]  1.0000000 10.0000000  0.7437399 #> [1]  1.0000000 20.0000000  0.7437399 #> [1]  1.0000000 30.0000000  0.7437399 #> [1]  1.0000000 40.0000000  0.7437399 #> [1]  1.0000000 50.0000000  0.7437399 #> [1]  1.0000000 60.0000000  0.7437399 #> [1]  1.0000000 70.0000000  0.7437399 #> [1]  1.0000000 80.0000000  0.7437399 #> [1]  1.0000000 90.0000000  0.7437399 #> [1]   1.0000000 100.0000000   0.7437399 #>  [1] 0.7390377 0.7625489 0.7437399 0.0000000 0.0000000 0.0000000 0.0000000 #>  [8] 0.0000000 0.0000000 0.0000000 #> 8 rows by 2 columns #>      Phase,    Search%,    A-measure #> [1] 2.0000000 0.0000000 0.7842118 #> [1]  2.0000000 10.0000000  0.7717472 #> [1]  2.0000000 20.0000000  0.7717472 #> [1]  2.0000000 30.0000000  0.7717472 #> [1]  2.0000000 40.0000000  0.7717472 #> [1]  2.0000000 50.0000000  0.7716664 #> [1]  2.0000000 60.0000000  0.7716664 #> [1]  2.0000000 70.0000000  0.7716664 #> [1]  2.0000000 80.0000000  0.7716664 #> [1]  2.0000000 90.0000000  0.7716664 #> [1]   2.0000000 100.0000000   0.7716664 #>  [1] 0.7593699 0.8208523 0.7716664 0.0000000 0.0000000 0.0000000 0.0000000 #>  [8] 0.0000000 0.0000000 0.0000000 #> [1] \"#####################################\" #> [1] \"# Final search has not yet been run #\" #> [1] \"#####################################\" #>      Phase,    Search%,    A-measure #> [1] 1.000000 0.000000 1.896849 #> [1]  1.000000 10.000000  1.756136 #> [1]  1.00000 20.00000  1.69891 #> [1]  1.000000 30.000000  1.679198 #> [1]  1.000000 40.000000  1.656411 #> [1]  1.000000 50.000000  1.633088 #> [1]  1.000000 60.000000  1.620262 #> [1]  1.000000 70.000000  1.613022 #> [1]  1.000000 80.000000  1.600019 #> [1]  1.000000 90.000000  1.590032 #> [1]   1.000000 100.000000   1.590032 #>  [1] 1.590032 1.590032 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 #>  [9] 0.000000 0.000000 head(ilri_prep) #>      unique_id unit          geno entry row range rep #> 1 e0d74dbbdf7a    1 CIP319052.004    38   1     1   1 #> 2 53622e92230a    2 CIP319040.006    13   2     1   1 #> 3 ac8ab74804b2    3 CIP319020.002    21   3     1   1 #> 4 8d597c29d2bf    4       Sagitta    56   4     1   1 #> 5 e58306d37101    5 CIP319020.004     9   5     1   1 #> 6 73274476287e    6 CIP319064.006    47   6     1   1"},{"path":"/articles/get-started.html","id":"rowcol-design","dir":"Articles","previous_headings":"","what":"rowcol design","title":"Get started","text":"rowcol design 4 genotypes 2 checks","code":"df <- data.frame(geno = LETTERS[1:4]) rcD <-   randomize_row_col(     clones = df,     tot = 6,     rowD = 6,     n_dummies = 0,     to_add = 2,     rep = 3,     path = NULL   ) #>      Phase,    Search%,    A-measure #> [1] 1.0000000 0.0000000 0.8121212 #> [1]  1.0000000 10.0000000  0.8121212 #> [1]  1.0000000 20.0000000  0.8121212 #> [1]  1.0000000 30.0000000  0.8121212 #> [1]  1.0000000 40.0000000  0.8121212 #> [1]  1.0000000 50.0000000  0.8121212 #> [1]  1.0000000 60.0000000  0.8121212 #> [1]  1.0000000 70.0000000  0.8121212 #> [1]  1.0000000 80.0000000  0.8121212 #> [1]  1.0000000 90.0000000  0.8121212 #> [1]   1.0000000 100.0000000   0.8121212 #>  [1] 0.8121212 0.8121212 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [8] 0.0000000 0.0000000 0.0000000 #> 1 row by 3 columns #>      Phase,    Search%,    A-measure #> [1] 2.0000000 0.0000000 0.9945268 #> [1]  2.0000000 10.0000000  0.8121212 #> [1]  2.0000000 20.0000000  0.8121212 #> [1]  2.0000000 30.0000000  0.8121212 #> [1]  2.0000000 40.0000000  0.8121212 #> [1]  2.0000000 50.0000000  0.8121212 #> [1]  2.0000000 60.0000000  0.8121212 #> [1]  2.0000000 70.0000000  0.8121212 #> [1]  2.0000000 80.0000000  0.8121212 #> [1]  2.0000000 90.0000000  0.8121212 #> [1]   2.0000000 100.0000000   0.8121212 #>  [1] 0.8121212 0.8121212 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [8] 0.0000000 0.0000000 0.0000000 head(rcD) #>      unique_id plot     geno entry row column rep #> 1 d5a49e9c2a52    1        C     3   1      1   1 #> 2 8512bff5936a    2  Sagitta     5   2      1   1 #> 3 c1737aad5934    3        A     1   3      1   2 #> 4 003cf58f147a    4 Sherekea     6   4      1   2 #> 5 f2bfbe4d31f3    5        D     4   5      1   3 #> 6 ad7c0bf01050    6        B     2   6      1   3"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Basil Okola. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Okola B (2025). pbwrangler: Potato Breeding Phenotypic Data Wrangler. R package version 0.0.0.9000, https://github.com/Bokola/pbwrangler.","code":"@Manual{,   title = {pbwrangler: Potato Breeding Phenotypic Data Wrangler},   author = {Basil Okola},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/Bokola/pbwrangler}, }"},{"path":"/index.html","id":"pbwrangler","dir":"","previous_headings":"","what":"Potato Breeding Phenotypic Data Wrangler","title":"Potato Breeding Phenotypic Data Wrangler","text":"goal pbwrangler curate sweet/potato breeding date analysis archiving breedbase. developed help document functions used read, wrangle write data daily.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Potato Breeding Phenotypic Data Wrangler","text":"can install development version pbwrangler GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"Bokola/pbwrangler\")"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Potato Breeding Phenotypic Data Wrangler","text":"Full documentation website : https://Bokola.github.io/pbwrangler","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Potato Breeding Phenotypic Data Wrangler","text":"can instance read .xlsx .csv files using","code":"# devtools::install_github(\"Bokola/pbwrangler\") library(pbwrangler)  f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") d <- read_workbooks(dir = NULL, file_to_read = f) lapply(d, function(x) x[1:5, 1:5]) #> $`uon-trial-1` #>           unique plot          geno entry row #> 1 1CIP317004.001    1 CIP317004.001    12   1 #> 2 2CIP317005.036    2 CIP317005.036    14   2 #> 3 3CIP317007.103    3 CIP317007.103    20   3 #> 4 4CIP317013.120    4 CIP317013.120    23   4 #> 5 5CIP317026.004    5 CIP317026.004    28   5"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Basil Okola Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/adv_clones.html","id":null,"dir":"Reference","previous_headings":"","what":"adv_clones — adv_clones","title":"adv_clones — adv_clones","text":"data containing advanced clones consideration.","code":""},{"path":"/reference/adv_clones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"adv_clones — adv_clones","text":"","code":"adv_clones"},{"path":"/reference/adv_clones.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"adv_clones — adv_clones","text":"data frame 111 rows 6 variables: sort row number current_clone_id current clone ID per CIP naming convention old_family_code clonal family code per previous naming convention year_of_cross year cross female female parent male male parent","code":""},{"path":"/reference/adv_clones.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"adv_clones — adv_clones","text":"CIP","code":""},{"path":"/reference/assign_benches.html","id":null,"dir":"Reference","previous_headings":"","what":"assign clones to tissue culture benches — assign_benches","title":"assign clones to tissue culture benches — assign_benches","text":"assign clones tissue culture benches","code":""},{"path":"/reference/assign_benches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"assign clones to tissue culture benches — assign_benches","text":"","code":"assign_benches(x, id_col = \"row_id\")"},{"path":"/reference/assign_benches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"assign clones to tissue culture benches — assign_benches","text":"x dataframe id_col row id index variable","code":""},{"path":"/reference/assign_benches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"assign clones to tissue culture benches — assign_benches","text":"dataframe","code":""},{"path":"/reference/capture_location.html","id":null,"dir":"Reference","previous_headings":"","what":"use purrr::imap to capture location of a trial from trial file\r\nipurrr::map applies a function to each element of a vector and its index — capture_location","title":"use purrr::imap to capture location of a trial from trial file\r\nipurrr::map applies a function to each element of a vector and its index — capture_location","text":"use purrr::imap capture location trial trial file ipurrr::map applies function element vector index","code":""},{"path":"/reference/capture_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"use purrr::imap to capture location of a trial from trial file\r\nipurrr::map applies a function to each element of a vector and its index — capture_location","text":"","code":"capture_location(lst)"},{"path":"/reference/capture_location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"use purrr::imap to capture location of a trial from trial file\r\nipurrr::map applies a function to each element of a vector and its index — capture_location","text":"lst list object","code":""},{"path":"/reference/capture_location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"use purrr::imap to capture location of a trial from trial file\r\nipurrr::map applies a function to each element of a vector and its index — capture_location","text":"vector length lst","code":""},{"path":"/reference/capture_location.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"use purrr::imap to capture location of a trial from trial file\r\nipurrr::map applies a function to each element of a vector and its index — capture_location","text":"","code":"f <- system.file(\"uon-trial-1.xlsx\", package = \"pbwrangler\") f1 <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\")  df <- read_workbooks(dir = NULL, file_to_read = f, sheet_name = \"Sheet 1\") df1 <- read_workbooks(dir = NULL, file_to_read = f1) #> Rows: 108 Columns: 32 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (8): unique, geno, flowering_date, flower_colour, flesh_colour, skin_co... #> dbl (24): plot, entry, row, col, rep, ntp, npe, growth_speed, pgh, plant_uni... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.  dat <- c(df, df1) # this has a loc variable dat_loc <- capture_location(dat) lapply(dat_loc, function(x) x$loc[1:5]) #> $`uon-trial-1` #> [1] \"uon-trial-1\" \"uon-trial-1\" \"uon-trial-1\" \"uon-trial-1\" \"uon-trial-1\" #>  #> $`uon-trial-1` #> [1] \"uon-trial-1\" \"uon-trial-1\" \"uon-trial-1\" \"uon-trial-1\" \"uon-trial-1\" #>"},{"path":"/reference/check_gene_chars.html","id":null,"dir":"Reference","previous_headings":"","what":"check length of accession family name - should be 9 — check_gene_chars","title":"check length of accession family name - should be 9 — check_gene_chars","text":"check length accession family name - 9","code":""},{"path":"/reference/check_gene_chars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check length of accession family name - should be 9 — check_gene_chars","text":"","code":"check_gene_chars(x)"},{"path":"/reference/check_gene_chars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check length of accession family name - should be 9 — check_gene_chars","text":"x dataframe","code":""},{"path":"/reference/check_gene_chars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check length of accession family name - should be 9 — check_gene_chars","text":"data frame","code":""},{"path":"/reference/check_geno.html","id":null,"dir":"Reference","previous_headings":"","what":"get accession names that do not conform to required protocol — check_geno","title":"get accession names that do not conform to required protocol — check_geno","text":"get accession names conform required protocol","code":""},{"path":"/reference/check_geno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get accession names that do not conform to required protocol — check_geno","text":"","code":"check_geno(x, season, dir = out_dir)"},{"path":"/reference/check_geno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get accession names that do not conform to required protocol — check_geno","text":"x list dataframes season trial season dir output directory","code":""},{"path":"/reference/check_geno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get accession names that do not conform to required protocol — check_geno","text":"data frame","code":""},{"path":"/reference/check_geno.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get accession names that do not conform to required protocol — check_geno","text":"","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir = NULL, file_to_read = f)  #> Rows: 108 Columns: 32 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (8): unique, geno, flowering_date, flower_colour, flesh_colour, skin_co... #> dbl (24): plot, entry, row, col, rep, ntp, npe, growth_speed, pgh, plant_uni... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. df_checked <- check_geno(df) #> All accession names in order #> All accession names in order"},{"path":"/reference/clean_clone_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean accession names — clean_clone_name","title":"Clean accession names — clean_clone_name","text":"Clean accession names","code":""},{"path":"/reference/clean_clone_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean accession names — clean_clone_name","text":"","code":"clean_clone_name(x)"},{"path":"/reference/clean_clone_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean accession names — clean_clone_name","text":"x character vector clone/genotype IDs","code":""},{"path":"/reference/clean_clone_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean accession names — clean_clone_name","text":"vector length x","code":""},{"path":"/reference/clean_dir_name.html","id":null,"dir":"Reference","previous_headings":"","what":"clean file name using gsub — clean_dir_name","title":"clean file name using gsub — clean_dir_name","text":"clean file name using gsub","code":""},{"path":"/reference/clean_dir_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clean file name using gsub — clean_dir_name","text":"","code":"clean_dir_name(x)"},{"path":"/reference/clean_dir_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clean file name using gsub — clean_dir_name","text":"x character vector file directory file name","code":""},{"path":"/reference/clean_dir_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clean file name using gsub — clean_dir_name","text":"character vector","code":""},{"path":"/reference/clean_dir_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"clean file name using gsub — clean_dir_name","text":"","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") clean_dir_name(f) #> [1] \"uon-trial-1\""},{"path":"/reference/clean_dir_name_c.html","id":null,"dir":"Reference","previous_headings":"","what":"clean file name using gsub — clean_dir_name_c","title":"clean file name using gsub — clean_dir_name_c","text":"clean file name using gsub","code":""},{"path":"/reference/clean_dir_name_c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clean file name using gsub — clean_dir_name_c","text":"","code":"clean_dir_name_c(x)"},{"path":"/reference/clean_dir_name_c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clean file name using gsub — clean_dir_name_c","text":"x character vector file directory file name","code":""},{"path":"/reference/clean_dir_name_c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clean file name using gsub — clean_dir_name_c","text":"character vector","code":""},{"path":"/reference/clean_file_names.html","id":null,"dir":"Reference","previous_headings":"","what":"clean file names using gsub — clean_file_names","title":"clean file names using gsub — clean_file_names","text":"clean file names using gsub","code":""},{"path":"/reference/clean_file_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clean file names using gsub — clean_file_names","text":"","code":"clean_file_names(out)"},{"path":"/reference/clean_file_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clean file names using gsub — clean_file_names","text":"list trial dataframes","code":""},{"path":"/reference/clean_file_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clean file names using gsub — clean_file_names","text":"list names cleaned","code":""},{"path":"/reference/clean_var_names.html","id":null,"dir":"Reference","previous_headings":"","what":"clean variable names — clean_var_names","title":"clean variable names — clean_var_names","text":"clean variable names","code":""},{"path":"/reference/clean_var_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clean variable names — clean_var_names","text":"","code":"clean_var_names(x)"},{"path":"/reference/clean_var_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clean variable names — clean_var_names","text":"x character vector variable names","code":""},{"path":"/reference/clean_var_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clean variable names — clean_var_names","text":"character vector","code":""},{"path":"/reference/combine_meta_files.html","id":null,"dir":"Reference","previous_headings":"","what":"read meta-files from separate trials in a season into 1 file — combine_meta_files","title":"read meta-files from separate trials in a season into 1 file — combine_meta_files","text":"read meta-files separate trials season 1 file","code":""},{"path":"/reference/combine_meta_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read meta-files from separate trials in a season into 1 file — combine_meta_files","text":"","code":"combine_meta_files(season, path = out_dir)"},{"path":"/reference/combine_meta_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read meta-files from separate trials in a season into 1 file — combine_meta_files","text":"season trial season \"season-2024\" path directory containing meta files","code":""},{"path":"/reference/combine_meta_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read meta-files from separate trials in a season into 1 file — combine_meta_files","text":"dataframe","code":""},{"path":"/reference/combine_meta_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read meta-files from separate trials in a season into 1 file — combine_meta_files","text":"","code":"list_files(system.file(package = \"pbwrangler\"))[1:5] #> [1] \"C:/Users/BasilOkola/AppData/Local/R/win-library/4.3/pbwrangler/DESCRIPTION\" #> [2] \"C:/Users/BasilOkola/AppData/Local/R/win-library/4.3/pbwrangler/INDEX\"       #> [3] \"C:/Users/BasilOkola/AppData/Local/R/win-library/4.3/pbwrangler/LICENSE\"     #> [4] \"C:/Users/BasilOkola/AppData/Local/R/win-library/4.3/pbwrangler/Meta\"        #> [5] \"C:/Users/BasilOkola/AppData/Local/R/win-library/4.3/pbwrangler/NAMESPACE\""},{"path":"/reference/compare_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare field experiment data to see if they share designs, variables, etc. — compare_df","title":"Compare field experiment data to see if they share designs, variables, etc. — compare_df","text":"Compare field experiment data see share designs, variables, etc.","code":""},{"path":"/reference/compare_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare field experiment data to see if they share designs, variables, etc. — compare_df","text":"","code":"compare_df(x, y)"},{"path":"/reference/compare_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare field experiment data to see if they share designs, variables, etc. — compare_df","text":"x first dataframe y second dataframe","code":""},{"path":"/reference/compare_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare field experiment data to see if they share designs, variables, etc. — compare_df","text":"dataframe difference/similarities btwn x, y","code":""},{"path":"/reference/compare_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare field experiment data to see if they share designs, variables, etc. — compare_df","text":"","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir=NULL, file_to_read = f)[[1]] #> Rows: 108 Columns: 32 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (8): unique, geno, flowering_date, flower_colour, flesh_colour, skin_co... #> dbl (24): plot, entry, row, col, rep, ntp, npe, growth_speed, pgh, plant_uni... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. f1 <- system.file(\"uon-trial-1.xlsx\", package = \"pbwrangler\") df1 <- read_workbooks(dir=NULL, file_to_read = f, sheet_name = \"Sheet1\")[[1]] #> Rows: 108 Columns: 32 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (8): unique, geno, flowering_date, flower_colour, flesh_colour, skin_co... #> dbl (24): plot, entry, row, col, rep, ntp, npe, growth_speed, pgh, plant_uni... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. compare_df(df, df1) #>    dim_X  dim_Y design_X design_Y cols_not_X cols_not_Y #> 1 108,32 108,32     6*18     6*18"},{"path":"/reference/compute_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute nmtp, mtwp (no/marketable tuber weight per plot) — compute_cols","title":"Compute nmtp, mtwp (no/marketable tuber weight per plot) — compute_cols","text":"Compute nmtp, mtwp (/marketable tuber weight per plot)","code":""},{"path":"/reference/compute_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute nmtp, mtwp (no/marketable tuber weight per plot) — compute_cols","text":"","code":"compute_cols(x)"},{"path":"/reference/compute_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute nmtp, mtwp (no/marketable tuber weight per plot) — compute_cols","text":"x list dataframes","code":""},{"path":"/reference/compute_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute nmtp, mtwp (no/marketable tuber weight per plot) — compute_cols","text":"list","code":""},{"path":"/reference/convert_to_character.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce columns to character — convert_to_character","title":"Coerce columns to character — convert_to_character","text":"Coerce columns character","code":""},{"path":"/reference/convert_to_character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce columns to character — convert_to_character","text":"","code":"convert_to_character(x, to_char = c(\"obs\", \"notes\"))"},{"path":"/reference/convert_to_character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce columns to character — convert_to_character","text":"x dataframe to_char column names coerce character","code":""},{"path":"/reference/convert_to_character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce columns to character — convert_to_character","text":"dataframe","code":""},{"path":"/reference/convert_to_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce columns to factors — convert_to_factor","title":"Coerce columns to factors — convert_to_factor","text":"Coerce columns factors","code":""},{"path":"/reference/convert_to_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce columns to factors — convert_to_factor","text":"","code":"convert_to_factor(   x,   to_fact = c(\"rep\", \"plot\", \"loc\", \"block\", \"trial\", \"row\", \"col\", \"type\", \"check\",     \"clone\", \"geno\") )"},{"path":"/reference/convert_to_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce columns to factors — convert_to_factor","text":"x dataframe to_fact vector column names coerce factor","code":""},{"path":"/reference/convert_to_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce columns to factors — convert_to_factor","text":"dataframe","code":""},{"path":"/reference/convert_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"onvert column values that numeric but read as character to numeric — convert_to_numeric","title":"onvert column values that numeric but read as character to numeric — convert_to_numeric","text":"onvert column values numeric read character numeric","code":""},{"path":"/reference/convert_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"onvert column values that numeric but read as character to numeric — convert_to_numeric","text":"","code":"convert_to_numeric(x)"},{"path":"/reference/convert_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"onvert column values that numeric but read as character to numeric — convert_to_numeric","text":"x dataframe","code":""},{"path":"/reference/convert_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"onvert column values that numeric but read as character to numeric — convert_to_numeric","text":"dataframe","code":""},{"path":"/reference/create_family_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"create new family code per new naming convention — create_family_vars","title":"create new family code per new naming convention — create_family_vars","text":"create new family code per new naming convention","code":""},{"path":"/reference/create_family_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create new family code per new naming convention — create_family_vars","text":"","code":"create_family_vars(x)"},{"path":"/reference/create_family_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create new family code per new naming convention — create_family_vars","text":"x dataframe trial data","code":""},{"path":"/reference/create_family_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create new family code per new naming convention — create_family_vars","text":"dataframe","code":""},{"path":"/reference/create_family_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create new family code per new naming convention — create_family_vars","text":"","code":"f <- system.file(\"uon-trial-1.xlsx\", package = \"pbwrangler\") df <- read_workbooks(dir = NULL, file_to_read = f, sheet_name = \"Sheet 1\") %>%   capture_location(.) %>% `[[`(1)  create_family_vars(df)[1:5, ] #> Warning: There were 9 warnings in `dplyr::mutate()`. #> The first warning was: #> ℹ In argument: `old_year_of_cross = ifelse(...)`. #> Caused by warning in `ifelse()`: #> ! NAs introduced by coercion #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 8 remaining warnings. #>            geno         loc old_family_code old_year_of_cross year_of_cross #> 1 CIP317004.001 uon-trial-1       CIP317004              2017          2021 #> 2 CIP317005.036 uon-trial-1       CIP317005              2017          2021 #> 3 CIP317007.103 uon-trial-1       CIP317007              2017          2021 #> 4 CIP317013.120 uon-trial-1       CIP317013              2017          2021 #> 5 CIP317026.004 uon-trial-1       CIP317026              2017          2021 #>   new_family_code  new_clone_id #> 1       CIP321004 CIP321004.001 #> 2       CIP321005 CIP321005.036 #> 3       CIP321007 CIP321007.103 #> 4       CIP321013 CIP321013.120 #> 5       CIP321026 CIP321026.004"},{"path":"/reference/create_meta_file.html","id":null,"dir":"Reference","previous_headings":"","what":"create a meta-data file with design factors, planting dates etc — create_meta_file","title":"create a meta-data file with design factors, planting dates etc — create_meta_file","text":"create meta-data file design factors, planting dates etc","code":""},{"path":"/reference/create_meta_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a meta-data file with design factors, planting dates etc — create_meta_file","text":"","code":"create_meta_file(x, season, d_dir = out_dir)"},{"path":"/reference/create_meta_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create a meta-data file with design factors, planting dates etc — create_meta_file","text":"x list trials generate metadata season trial season e.g \"season-2024\" d_dir folder directory write meta-data e.g., \"C://Users/Documents\"","code":""},{"path":"/reference/create_meta_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a meta-data file with design factors, planting dates etc — create_meta_file","text":"list dataframes","code":""},{"path":"/reference/create_meta_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create a meta-data file with design factors, planting dates etc — create_meta_file","text":"","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir = NULL, file_to_read = f) #> Rows: 108 Columns: 32 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (8): unique, geno, flowering_date, flower_colour, flesh_colour, skin_co... #> dbl (24): plot, entry, row, col, rep, ntp, npe, growth_speed, pgh, plant_uni... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. create_meta_file(df, season = \"season-2024\", d_dir = tempdir()) #> $`season-2024` #> # A tibble: 1 × 17 #>   trial_name breeding_program location year  transplanting_date design_type #>   <lgl>      <lgl>            <chr>    <chr> <lgl>              <lgl>       #> 1 NA         NA               NA       2024  NA                 NA          #> # ℹ 11 more variables: description <lgl>, trial_type <lgl>, plot_width <lgl>, #> #   plot_length <lgl>, planting_date <date>, harvest_date <date>, #> #   number_of_plants_per_ridge <lgl>, number_of_ridges_per_plot <lgl>, #> #   space_between_ridges <lgl>, space_between_plants_in_ridges <lgl>, #> #   number_of_plants_per_plot <lgl> #>"},{"path":"/reference/create_pedigree.html","id":null,"dir":"Reference","previous_headings":"","what":"create pedigree (ancestry) — create_pedigree","title":"create pedigree (ancestry) — create_pedigree","text":"create pedigree (ancestry)","code":""},{"path":"/reference/create_pedigree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create pedigree (ancestry) — create_pedigree","text":"","code":"create_pedigree(x)"},{"path":"/reference/create_pedigree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create pedigree (ancestry) — create_pedigree","text":"x dataframe genotypes created create_family_vars()","code":""},{"path":"/reference/create_pedigree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create pedigree (ancestry) — create_pedigree","text":"dataframe","code":""},{"path":[]},{"path":"/reference/create_td.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for statgenSTA::createTD for a row-col design model fitting — create_td","title":"A wrapper for statgenSTA::createTD for a row-col design model fitting — create_td","text":"wrapper statgenSTA::createTD row-col design model fitting","code":""},{"path":"/reference/create_td.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for statgenSTA::createTD for a row-col design model fitting — create_td","text":"","code":"create_td(x, design)"},{"path":"/reference/create_td.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for statgenSTA::createTD for a row-col design model fitting — create_td","text":"x datframe trial data design character vector experimental design e.g \"rowcol\", \"rcbd\"","code":""},{"path":"/reference/create_td.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for statgenSTA::createTD for a row-col design model fitting — create_td","text":"list object class TD","code":""},{"path":"/reference/drop_all_data.html","id":null,"dir":"Reference","previous_headings":"","what":"drop dataframe objects from a list of dataframes — drop_all_data","title":"drop dataframe objects from a list of dataframes — drop_all_data","text":"drop dataframe objects list dataframes","code":""},{"path":"/reference/drop_all_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drop dataframe objects from a list of dataframes — drop_all_data","text":"","code":"drop_all_data(x, pattern = \"^all|a1_table\")"},{"path":"/reference/drop_all_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"drop dataframe objects from a list of dataframes — drop_all_data","text":"x list dataframes pattern pattern character vector containing regular expression","code":""},{"path":"/reference/drop_all_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"drop dataframe objects from a list of dataframes — drop_all_data","text":"list dataframes","code":""},{"path":"/reference/drop_empty_dfs.html","id":null,"dir":"Reference","previous_headings":"","what":"drop from a list dataframes with no dimension or  columns having all NA — drop_empty_dfs","title":"drop from a list dataframes with no dimension or  columns having all NA — drop_empty_dfs","text":"drop list dataframes dimension  columns NA","code":""},{"path":"/reference/drop_empty_dfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drop from a list dataframes with no dimension or  columns having all NA — drop_empty_dfs","text":"","code":"drop_empty_dfs(x)"},{"path":"/reference/drop_empty_dfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"drop from a list dataframes with no dimension or  columns having all NA — drop_empty_dfs","text":"x list dataframes","code":""},{"path":"/reference/drop_empty_dfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"drop from a list dataframes with no dimension or  columns having all NA — drop_empty_dfs","text":"list","code":""},{"path":"/reference/drop_nas.html","id":null,"dir":"Reference","previous_headings":"","what":"delete columns with all values missing(NA) — drop_nas","title":"delete columns with all values missing(NA) — drop_nas","text":"delete columns values missing(NA)","code":""},{"path":"/reference/drop_nas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"delete columns with all values missing(NA) — drop_nas","text":"","code":"drop_nas(x)"},{"path":"/reference/drop_nas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"delete columns with all values missing(NA) — drop_nas","text":"x dataframe","code":""},{"path":"/reference/drop_nas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"delete columns with all values missing(NA) — drop_nas","text":"dataframe without completely missing columns","code":""},{"path":"/reference/drop_null_dfs.html","id":null,"dir":"Reference","previous_headings":"","what":"drop null dataframes from a list of dataframes — drop_null_dfs","title":"drop null dataframes from a list of dataframes — drop_null_dfs","text":"drop null dataframes list dataframes","code":""},{"path":"/reference/drop_null_dfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drop null dataframes from a list of dataframes — drop_null_dfs","text":"","code":"drop_null_dfs(x)"},{"path":"/reference/drop_null_dfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"drop null dataframes from a list of dataframes — drop_null_dfs","text":"x list dataframes","code":""},{"path":"/reference/drop_null_dfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"drop null dataframes from a list of dataframes — drop_null_dfs","text":"list","code":""},{"path":"/reference/drop_sheets.html","id":null,"dir":"Reference","previous_headings":"","what":"drop workbook sheets not of interest — drop_sheets","title":"drop workbook sheets not of interest — drop_sheets","text":"drop workbook sheets interest","code":""},{"path":"/reference/drop_sheets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drop workbook sheets not of interest — drop_sheets","text":"","code":"drop_sheets(x, pattern = \"min|pivot|sheet|weather|soil|all|unse|sele\")"},{"path":"/reference/drop_sheets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"drop workbook sheets not of interest — drop_sheets","text":"x list excel sheets pattern patern exclude","code":""},{"path":"/reference/drop_sheets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"drop workbook sheets not of interest — drop_sheets","text":"character vector","code":""},{"path":"/reference/drop_zeros.html","id":null,"dir":"Reference","previous_headings":"","what":"delete columns with all values 0 — drop_zeros","title":"delete columns with all values 0 — drop_zeros","text":"delete columns values 0","code":""},{"path":"/reference/drop_zeros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"delete columns with all values 0 — drop_zeros","text":"","code":"drop_zeros(x)"},{"path":"/reference/drop_zeros.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"delete columns with all values 0 — drop_zeros","text":"x dataframe","code":""},{"path":"/reference/drop_zeros.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"delete columns with all values 0 — drop_zeros","text":"dataframe columns values zero deleted","code":""},{"path":"/reference/duplicate_row.html","id":null,"dir":"Reference","previous_headings":"","what":"duplicate a row — duplicate_row","title":"duplicate a row — duplicate_row","text":"duplicate row","code":""},{"path":"/reference/duplicate_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"duplicate a row — duplicate_row","text":"","code":"duplicate_row(x, n = 8)"},{"path":"/reference/duplicate_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"duplicate a row — duplicate_row","text":"x dataframe n number copies create","code":""},{"path":"/reference/duplicate_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"duplicate a row — duplicate_row","text":"dataframe","code":""},{"path":"/reference/extract_blups.html","id":null,"dir":"Reference","previous_headings":"","what":"extract BLUPs from a REML model — extract_blups","title":"extract BLUPs from a REML model — extract_blups","text":"extract BLUPs REML model","code":""},{"path":"/reference/extract_blups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract BLUPs from a REML model — extract_blups","text":"","code":"extract_blups(x, pred)"},{"path":"/reference/extract_blups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract BLUPs from a REML model — extract_blups","text":"x object class STA fit_td pred character vector predictors: c(\"BLUEs\", \"seBLUEs) c(\"BLUPs\", \"seBLUPs)","code":""},{"path":"/reference/extract_blups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"extract BLUPs from a REML model — extract_blups","text":"dataframe","code":""},{"path":"/reference/family_code.html","id":null,"dir":"Reference","previous_headings":"","what":"country_level_data — family_code","title":"country_level_data — family_code","text":"data 'luHousePrices'.","code":""},{"path":"/reference/family_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"country_level_data — family_code","text":"","code":"family_code"},{"path":"/reference/family_code.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"country_level_data — family_code","text":"data frame 222 rows 6 variables: sort row number new_family_code new family code per CIP new naming convention old_family_code clonal family code per previous naming convention year_of_cross year cross female female parent male male parent","code":""},{"path":"/reference/family_code.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"country_level_data — family_code","text":"Observatoire de l'Habitat","code":""},{"path":"/reference/filter_geno.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter clone ids to rid of non-compliant formats — filter_geno","title":"Filter clone ids to rid of non-compliant formats — filter_geno","text":"Filter clone ids rid non-compliant formats","code":""},{"path":"/reference/filter_geno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter clone ids to rid of non-compliant formats — filter_geno","text":"","code":"filter_geno(x, pattern = \"x|^\\\\*\")"},{"path":"/reference/filter_geno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter clone ids to rid of non-compliant formats — filter_geno","text":"x dataframe pattern character vector containing regular expression","code":""},{"path":"/reference/filter_geno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter clone ids to rid of non-compliant formats — filter_geno","text":"dataframe","code":""},{"path":"/reference/find_var.html","id":null,"dir":"Reference","previous_headings":"","what":"find variables in df — find_var","title":"find variables in df — find_var","text":"find variables df","code":""},{"path":"/reference/find_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find variables in df — find_var","text":"","code":"find_var(x, var)"},{"path":"/reference/find_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find variables in df — find_var","text":"x dataframe var column name","code":""},{"path":"/reference/find_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find variables in df — find_var","text":"character vector","code":""},{"path":"/reference/fit_td.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for statgenSTA::fitTD for REML analysis — fit_td","title":"A wrapper for statgenSTA::fitTD for REML analysis — fit_td","text":"wrapper statgenSTA::fitTD REML analysis","code":""},{"path":"/reference/fit_td.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for statgenSTA::fitTD for REML analysis — fit_td","text":"","code":"fit_td(x, trait, spatial = FALSE)"},{"path":"/reference/fit_td.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for statgenSTA::fitTD for REML analysis — fit_td","text":"x TD object generated create_td trait character vector phenotypic traits model e.g ttyna spatial logical, whether fit spatial structure","code":""},{"path":"/reference/fit_td.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for statgenSTA::fitTD for REML analysis — fit_td","text":"object class STA","code":""},{"path":[]},{"path":"/reference/format_accessions.html","id":null,"dir":"Reference","previous_headings":"","what":"organize accessions to export — format_accessions","title":"organize accessions to export — format_accessions","text":"organize accessions export","code":""},{"path":"/reference/format_accessions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"organize accessions to export — format_accessions","text":"","code":"format_accessions(   x,   dir = out_dir,   sub_dir = \"accessions\",   season,   filename = \"accession_miss\" )"},{"path":"/reference/format_accessions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"organize accessions to export — format_accessions","text":"x list trial dataframes season dir output directory sub_dir output sub directory season trial season filename name output file","code":""},{"path":"/reference/format_accessions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"organize accessions to export — format_accessions","text":"dataframe","code":""},{"path":"/reference/geno_by_tubers.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribute clones to match the available seeds during replication — geno_by_tubers","title":"Distribute clones to match the available seeds during replication — geno_by_tubers","text":"Distribute clones match available seeds replication","code":""},{"path":"/reference/geno_by_tubers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribute clones to match the available seeds during replication — geno_by_tubers","text":"","code":"geno_by_tubers(df)"},{"path":"/reference/geno_by_tubers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribute clones to match the available seeds during replication — geno_by_tubers","text":"df dataframe available seed","code":""},{"path":"/reference/geno_by_tubers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribute clones to match the available seeds during replication — geno_by_tubers","text":"list","code":""},{"path":"/reference/geno_by_tubers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribute clones to match the available seeds during replication — geno_by_tubers","text":"","code":"data(\"ilri\", package = \"pbwrangler\") ins_ilri <- geno_by_tubers(ilri) lapply(ins_ilri, head, 5) #> $geno_3 #> [1] \"CIP319020.009\" \"CIP319027.002\" \"CIP319027.003\" \"CIP319052.003\" #> [5] \"CIP319052.006\" #>  #> $geno_2 #> [1] \"CIP319008.002\" \"CIP319019.001\" \"CIP319020.004\" \"CIP319020.005\" #> [5] \"CIP319020.008\" #>  #> $geno_1 #> [1] \"CIP319020.003\" \"CIP319020.006\" \"CIP319020.007\" \"CIP319020.002\" #> [5] \"CIP319027.001\" #>"},{"path":"/reference/gen_familycode.html","id":null,"dir":"Reference","previous_headings":"","what":"a regular expr deleting everything after last fullstop(.) or last underscore(_) — gen_familycode","title":"a regular expr deleting everything after last fullstop(.) or last underscore(_) — gen_familycode","text":"regular expr deleting everything last fullstop(.) last underscore(_)","code":""},{"path":"/reference/gen_familycode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"a regular expr deleting everything after last fullstop(.) or last underscore(_) — gen_familycode","text":"","code":"gen_familycode(x)"},{"path":"/reference/gen_familycode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"a regular expr deleting everything after last fullstop(.) or last underscore(_) — gen_familycode","text":"x character vector accession names","code":""},{"path":"/reference/gen_familycode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"a regular expr deleting everything after last fullstop(.) or last underscore(_) — gen_familycode","text":"character vector","code":""},{"path":"/reference/gen_location.html","id":null,"dir":"Reference","previous_headings":"","what":"generate possible location from file paths — gen_location","title":"generate possible location from file paths — gen_location","text":"generate possible location file paths","code":""},{"path":"/reference/gen_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate possible location from file paths — gen_location","text":"","code":"gen_location(x)"},{"path":"/reference/gen_location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate possible location from file paths — gen_location","text":"x character vector file directory","code":""},{"path":"/reference/gen_location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate possible location from file paths — gen_location","text":"character vector","code":""},{"path":"/reference/gen_uniqueid.html","id":null,"dir":"Reference","previous_headings":"","what":"generate unique ids — gen_uniqueid","title":"generate unique ids — gen_uniqueid","text":"generate unique ids","code":""},{"path":"/reference/gen_uniqueid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate unique ids — gen_uniqueid","text":"","code":"gen_uniqueid(x)"},{"path":"/reference/gen_uniqueid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate unique ids — gen_uniqueid","text":"x dataframe","code":""},{"path":"/reference/gen_uniqueid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate unique ids — gen_uniqueid","text":"character vector hashed ids","code":""},{"path":"/reference/get_design_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get experimental design factors from a trial dataframe/fieldbook — get_design_factors","title":"Get experimental design factors from a trial dataframe/fieldbook — get_design_factors","text":"Get experimental design factors trial dataframe/fieldbook","code":""},{"path":"/reference/get_design_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get experimental design factors from a trial dataframe/fieldbook — get_design_factors","text":"","code":"get_design_factors()"},{"path":"/reference/get_design_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get experimental design factors from a trial dataframe/fieldbook — get_design_factors","text":"character vector","code":""},{"path":"/reference/get_ontology_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"get ontology labels from {st4gi} — get_ontology_labels","title":"get ontology labels from {st4gi} — get_ontology_labels","text":"get ontology labels {st4gi}","code":""},{"path":"/reference/get_ontology_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get ontology labels from {st4gi} — get_ontology_labels","text":"","code":"get_ontology_labels(x, crop = \"pt\")"},{"path":"/reference/get_ontology_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get ontology labels from {st4gi} — get_ontology_labels","text":"x list dataframes dataframe object crop character vecto - pt sp","code":""},{"path":"/reference/get_ontology_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get ontology labels from {st4gi} — get_ontology_labels","text":"dataframe","code":""},{"path":"/reference/get_valid_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"get column names defined in ontology — get_valid_columns","title":"get column names defined in ontology — get_valid_columns","text":"get column names defined ontology","code":""},{"path":"/reference/get_valid_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get column names defined in ontology — get_valid_columns","text":"","code":"get_valid_columns(x)"},{"path":"/reference/get_valid_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get column names defined in ontology — get_valid_columns","text":"x dataframe","code":""},{"path":"/reference/get_valid_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get column names defined in ontology — get_valid_columns","text":"dataframe","code":""},{"path":"/reference/grapes-nin-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"%nin% returns a logical vector if there is a match or not for left operand — %nin%","title":"%nin% returns a logical vector if there is a match or not for left operand — %nin%","text":"%nin% returns logical vector match left operand","code":""},{"path":"/reference/grapes-nin-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"%nin% returns a logical vector if there is a match or not for left operand — %nin%","text":"","code":"x %nin% table"},{"path":"/reference/grapes-nin-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"%nin% returns a logical vector if there is a match or not for left operand — %nin%","text":"x vector table vector matching mode x","code":""},{"path":"/reference/grapes-nin-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"%nin% returns a logical vector if there is a match or not for left operand — %nin%","text":"logical vector","code":""},{"path":"/reference/ilri.html","id":null,"dir":"Reference","previous_headings":"","what":"ilri — ilri","title":"ilri — ilri","text":"data containing advanced clones consideration.","code":""},{"path":"/reference/ilri.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ilri — ilri","text":"","code":"ilri"},{"path":"/reference/ilri.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ilri — ilri","text":"data frame 55 row 2 variables: geno genotype number_of_tubers number tubers","code":""},{"path":"/reference/ilri.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ilri — ilri","text":"CIP","code":""},{"path":"/reference/join_by_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Join predictor and heritability (h2) data objects to one dataframe — join_by_keys","title":"Join predictor and heritability (h2) data objects to one dataframe — join_by_keys","text":"Join predictor heritability (h2) data objects one dataframe","code":""},{"path":"/reference/join_by_keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join predictor and heritability (h2) data objects to one dataframe — join_by_keys","text":"","code":"join_by_keys(x, y)"},{"path":"/reference/join_by_keys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join predictor and heritability (h2) data objects to one dataframe — join_by_keys","text":"x first data object either predictors h2 y second data object","code":""},{"path":"/reference/join_by_keys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join predictor and heritability (h2) data objects to one dataframe — join_by_keys","text":"dataframe","code":""},{"path":"/reference/join_by_keys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join predictor and heritability (h2) data objects to one dataframe — join_by_keys","text":"","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir = NULL, file_to_read = f) %>%   purrr::map(     ., ~dplyr::mutate(       ., year = \"2024\", loc = \"UON\", trial = \"lbht\"     )   ) #> Rows: 108 Columns: 32 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (8): unique, geno, flowering_date, flower_colour, flesh_colour, skin_co... #> dbl (24): plot, entry, row, col, rep, ntp, npe, growth_speed, pgh, plant_uni... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. df_out <- pre_process_trials(df) |> process_trials() %>%   purrr::map(., run_data_processes) %>% `[[`(1)  #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Joining with `by = join_by(old_family_code)` #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"flesh_colour\", \"skin_colour\", \"late_blight_60_days\", \"obs\", \"photo\", \"trial\") #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"flesh_colour\", \"skin_colour\", \"late_blight_60_days\", \"obs\", \"photo\", \"trial\") #> Warning: Some variables have been overwritten: c(\"mtwp\", \"nmtp\") #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"flesh_colour\", \"skin_colour\", \"late_blight_60_days\", \"obs\", \"photo\", \"trial\") #> Warning: Rows with out of scale values replaced with NA for variable nmtp: 54  #> Warning: Rows with out of scale values replaced with NA for variable nmtci: 54  #> Warning: Rows with out of scale values replaced with NA for variable nmtcii: 54  #> Warning: Rows with out of scale values replaced with NA for variable tntp: 54  #> Warning: Rows with extreme values replaced with NA for variable atmw: 54  #> Warning: Rows with extreme values replaced with NA for variable atw: 54  #> Warning: Rows with extreme values replaced with NA for variable mtwp: 54  #> Warning: Rows with extreme values replaced with NA for variable mtwcii: 54  #> Warning: Rows with extreme values replaced with NA for variable mtyna: 54  #> Warning: Rows with extreme values replaced with NA for variable ttwp: 54  #> Warning: Rows with extreme values replaced with NA for variable ttyna: 54  #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"late_blight_60_days\", \"obs\", \"photo\", \"trial\") #> Warning: Some variables have been overwritten: c(\"mtwp\", \"ttwp\", \"nmtp\", \"tntp\", \"atmw\", \"atw\", \"ppe\", \"mtyna\", \"ttyna\") #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"late_blight_60_days\", \"obs\", \"photo\", \"trial\") #> Warning: Rows with out of scale values replaced with NA for variable tbfsh1: 1 2 3 4 5 6 19 20 21 22 23 24 37 38 39 40 41 42 55 56 57 58 59 60 73 74 75 76 77 78 91 92 93 94 95 96  #> Warning: Rows with out of scale values replaced with NA for variable tbskn1: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108  #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"late_blight_60_days\", \"obs\", \"photo\", \"trial\") #> Warning: Some variables have been overwritten: c(\"mtwp\", \"ttwp\", \"nmtp\", \"tntp\", \"atmw\", \"atw\", \"ppe\", \"mtyna\", \"ttyna\") #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"late_blight_60_days\", \"obs\", \"photo\", \"trial\") # trial design object TD <- create_td(df_out, design = \"rowcol\") # fit  fit_TD <- fit_td(TD, trait = \"mtwp\") #> Using SpATS for fitting models. # extract predictions  pred_TD <- extract_blups(fit_TD, pred = c(\"BLUEs\", \"seBLUEs\"))  pred_TD[[1]][1:5,] #>         genotype trial BLUEs_mtwp seBLUEs_mtwp #> 1  CIP312084.731  lbht  10.514036     1.187315 #> 2 CIP3177011.028  lbht  10.200466     1.462786 #> 3 CIP3177023.046  lbht   6.488979     1.239065 #> 4 CIP3177038.001  lbht   6.609805     2.149885 #> 5 CIP3217003.001  lbht  12.022090     1.451649"},{"path":"/reference/keep_geno.html","id":null,"dir":"Reference","previous_headings":"","what":"drop dfs w/o geno column — keep_geno","title":"drop dfs w/o geno column — keep_geno","text":"drop dfs w/o geno column","code":""},{"path":"/reference/keep_geno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drop dfs w/o geno column — keep_geno","text":"","code":"keep_geno(x)"},{"path":"/reference/keep_geno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"drop dfs w/o geno column — keep_geno","text":"x list dataframes","code":""},{"path":"/reference/keep_geno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"drop dfs w/o geno column — keep_geno","text":"list","code":""},{"path":"/reference/keep_ttyna.html","id":null,"dir":"Reference","previous_headings":"","what":"drop dfs without ttyna as a column — keep_ttyna","title":"drop dfs without ttyna as a column — keep_ttyna","text":"drop dfs without ttyna column","code":""},{"path":"/reference/keep_ttyna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drop dfs without ttyna as a column — keep_ttyna","text":"","code":"keep_ttyna(x)"},{"path":"/reference/keep_ttyna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"drop dfs without ttyna as a column — keep_ttyna","text":"x list","code":""},{"path":"/reference/keep_ttyna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"drop dfs without ttyna as a column — keep_ttyna","text":"list","code":""},{"path":"/reference/list_design_files.html","id":null,"dir":"Reference","previous_headings":"","what":"List design files after designing trial experiments in R — list_design_files","title":"List design files after designing trial experiments in R — list_design_files","text":"List design files designing trial experiments R","code":""},{"path":"/reference/list_design_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List design files after designing trial experiments in R — list_design_files","text":"","code":"list_design_files(   dir = rand_dir,   season = \"season-2024-2025\",   s = \".csv|.xlsx\",   sub_dir = NULL,   ... )"},{"path":"/reference/list_design_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List design files after designing trial experiments in R — list_design_files","text":"dir directory containing fieldboooks season trial seasom s vector charcter string grep e.g s = \".csv|.xlsx\" sub_dir sub-directory filedbooks nested sub-directory ... argument","code":""},{"path":"/reference/list_design_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List design files after designing trial experiments in R — list_design_files","text":"list filedbooks","code":""},{"path":"/reference/list_files.html","id":null,"dir":"Reference","previous_headings":"","what":"List file in a directory — list_files","title":"List file in a directory — list_files","text":"List file directory","code":""},{"path":"/reference/list_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List file in a directory — list_files","text":"","code":"list_files(folder, subset = FALSE, n = NULL, ...)"},{"path":"/reference/list_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List file in a directory — list_files","text":"folder directory files e.g. \"C://users/user/x subset logical value whether return subset files folder n integer. number files return subsetting ... parameters specify","code":""},{"path":"/reference/list_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List file in a directory — list_files","text":"character vector listed files","code":""},{"path":"/reference/merge_note_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge notes & obs to one column — merge_note_obs","title":"Merge notes & obs to one column — merge_note_obs","text":"Merge notes & obs one column","code":""},{"path":"/reference/merge_note_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge notes & obs to one column — merge_note_obs","text":"","code":"merge_note_obs(x)"},{"path":"/reference/merge_note_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge notes & obs to one column — merge_note_obs","text":"x dataframe","code":""},{"path":"/reference/merge_note_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge notes & obs to one column — merge_note_obs","text":"dataframe","code":""},{"path":"/reference/merge_note_obs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge notes & obs to one column — merge_note_obs","text":"","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir=NULL, file_to_read = f)[[1]] #> Rows: 108 Columns: 32 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (8): unique, geno, flowering_date, flower_colour, flesh_colour, skin_co... #> dbl (24): plot, entry, row, col, rep, ntp, npe, growth_speed, pgh, plant_uni... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. merge_note_obs(df)[1:5, \"obs\"] #> [1] \"long oblong,,good yield\" \"very good yield\"         #> [3] \"buds, pinkish eyes\"      \"good yield\"              #> [5] NA"},{"path":"/reference/meta.html","id":null,"dir":"Reference","previous_headings":"","what":"adv_clones — meta","title":"adv_clones — meta","text":"data containing advanced clones consideration.","code":""},{"path":"/reference/meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"adv_clones — meta","text":"","code":"meta"},{"path":"/reference/meta.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"adv_clones — meta","text":"data frame 1 row 17 variables: trial_name trial name breeding_program breeding program location trial location year trial year transplanting_date date transplanting design_type type field design description description field detailing trial trial_type trial type plot_width plot width plot_length plot length planting_date planting date harvest_date harvest date number_of_plants_per_ridge number plants per ridge number_of_ridges_per_plot number ridges per plot space_between_ridges space ridges space_between_plants_in_ridges space plants ridges number_of_plants_per_plot number plants per plot","code":""},{"path":"/reference/meta.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"adv_clones — meta","text":"CIP","code":""},{"path":"/reference/my_left.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract first n elements of a string — my_left","title":"Extract first n elements of a string — my_left","text":"Extract first n elements string","code":""},{"path":"/reference/my_left.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract first n elements of a string — my_left","text":"","code":"my_left(x, num)"},{"path":"/reference/my_left.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract first n elements of a string — my_left","text":"x character vector length num integer - number elements extract","code":""},{"path":"/reference/my_left.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract first n elements of a string — my_left","text":"character vector","code":""},{"path":"/reference/my_left.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract first n elements of a string — my_left","text":"","code":"a <- c(\"asdf\", \"bnmkk\") my_left(a, num = 3) #> [1] \"asd\" \"bnm\"  a <- c(\"asdf\", \"bnmkk\") my_right(a, num = 3) #> [1] \"sdf\" \"mkk\"  df <- data.frame(a = NA, b = c(1:3, NA), c = 0) drop_nas(df) #>    b c #> 1  1 0 #> 2  2 0 #> 3  3 0 #> 4 NA 0 drop_zeros(df) #>    a  b #> 1 NA  1 #> 2 NA  2 #> 3 NA  3 #> 4 NA NA"},{"path":"/reference/my_right.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract last n elements of a string — my_right","title":"Extract last n elements of a string — my_right","text":"Extract last n elements string","code":""},{"path":"/reference/my_right.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract last n elements of a string — my_right","text":"","code":"my_right(x, num)"},{"path":"/reference/my_right.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract last n elements of a string — my_right","text":"x character vector length num integer - number elements extract","code":""},{"path":"/reference/my_right.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract last n elements of a string — my_right","text":"character vector","code":""},{"path":"/reference/names_df.html","id":null,"dir":"Reference","previous_headings":"","what":"sort names in ascending order — names_df","title":"sort names in ascending order — names_df","text":"sort names ascending order","code":""},{"path":"/reference/names_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sort names in ascending order — names_df","text":"","code":"names_df(x)"},{"path":"/reference/names_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sort names in ascending order — names_df","text":"x named object","code":""},{"path":"/reference/names_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sort names in ascending order — names_df","text":"null","code":""},{"path":"/reference/pbwrangler-package.html","id":null,"dir":"Reference","previous_headings":"","what":"pbwrangler: Potato Breeding Phenotypic Data Wrangler — pbwrangler-package","title":"pbwrangler: Potato Breeding Phenotypic Data Wrangler — pbwrangler-package","text":"`pbwrangler` collection -house functions used curating potato breeding data analysis archiving breeding databases.","code":""},{"path":[]},{"path":"/reference/pbwrangler-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pbwrangler: Potato Breeding Phenotypic Data Wrangler — pbwrangler-package","text":"Maintainer: Basil Okola okolabasilowiti@gmail.com","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/pre_process_trials.html","id":null,"dir":"Reference","previous_headings":"","what":"run a number of checks & transformations to pre-process a list of trial data — pre_process_trials","title":"run a number of checks & transformations to pre-process a list of trial data — pre_process_trials","text":"run number checks & transformations pre-process list trial data","code":""},{"path":"/reference/pre_process_trials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"run a number of checks & transformations to pre-process a list of trial data — pre_process_trials","text":"","code":"pre_process_trials(x)"},{"path":"/reference/pre_process_trials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"run a number of checks & transformations to pre-process a list of trial data — pre_process_trials","text":"x list dataframes","code":""},{"path":"/reference/pre_process_trials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"run a number of checks & transformations to pre-process a list of trial data — pre_process_trials","text":"list dataframes","code":""},{"path":"/reference/pre_process_trials_.html","id":null,"dir":"Reference","previous_headings":"","what":"run a number of checks & transformations to pre-process a list of trial data — pre_process_trials_","title":"run a number of checks & transformations to pre-process a list of trial data — pre_process_trials_","text":"run number checks & transformations pre-process list trial data","code":""},{"path":"/reference/pre_process_trials_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"run a number of checks & transformations to pre-process a list of trial data — pre_process_trials_","text":"","code":"pre_process_trials_(x)"},{"path":"/reference/pre_process_trials_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"run a number of checks & transformations to pre-process a list of trial data — pre_process_trials_","text":"x list dataframes","code":""},{"path":"/reference/pre_process_trials_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"run a number of checks & transformations to pre-process a list of trial data — pre_process_trials_","text":"list dataframes","code":""},{"path":"/reference/process_trials.html","id":null,"dir":"Reference","previous_headings":"","what":"run a number of checks & transformations to pre-process a list of trial data — process_trials","title":"run a number of checks & transformations to pre-process a list of trial data — process_trials","text":"run number checks & transformations pre-process list trial data","code":""},{"path":"/reference/process_trials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"run a number of checks & transformations to pre-process a list of trial data — process_trials","text":"","code":"process_trials(x)"},{"path":"/reference/process_trials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"run a number of checks & transformations to pre-process a list of trial data — process_trials","text":"x list dataframes","code":""},{"path":"/reference/process_trials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"run a number of checks & transformations to pre-process a list of trial data — process_trials","text":"list dataframes","code":""},{"path":"/reference/randomize_row_col.html","id":null,"dir":"Reference","previous_headings":"","what":"row column design: plots = row by col; equal rep for each treatment — randomize_row_col","title":"row column design: plots = row by col; equal rep for each treatment — randomize_row_col","text":"row column design: plots = row col; equal rep treatment","code":""},{"path":"/reference/randomize_row_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"row column design: plots = row by col; equal rep for each treatment — randomize_row_col","text":"","code":"randomize_row_col(   clones,   tot,   loc,   rowD,   n_dummies,   rep,   season,   path = rand_dir,   check = c(\"Shangi\", \"Unica\", \"Sagitta\", \"Sherekea\"),   dummy = c(\"Unica\", \"Shangi\"),   to_add = 4 )"},{"path":"/reference/randomize_row_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"row column design: plots = row by col; equal rep for each treatment — randomize_row_col","text":"clones ca dataframe geno column tot integer. total number unique clones/genotypes randomized field loc character. trial location rowD integer. number rows field n_dummies integer. number dummies complete rectangular layout rep integer. number replication season season trial path character specifying path write design check character vector checks fill rectangular grid dummy character vector dummy checks fill rectangular grid to_add integer. number checks add complete rectangular grid","code":""},{"path":"/reference/randomize_row_col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"row column design: plots = row by col; equal rep for each treatment — randomize_row_col","text":"","code":"df <- data.frame(geno = LETTERS[1:4]) rcD <-   randomize_row_col(     clones = df,     tot = 6,     rowD = 6,     n_dummies = 0,     to_add = 2,     rep = 3,     path = NULL   ) #> Warning: replacing previous import 'R.oo::throw' by 'R.methodsS3::throw' when loading 'DiGGer' #>      Phase,    Search%,    A-measure #> [1] 1.0000000 0.0000000 0.8121212 #> [1]  1.0000000 10.0000000  0.8121212 #> [1]  1.0000000 20.0000000  0.8121212 #> [1]  1.0000000 30.0000000  0.8121212 #> [1]  1.0000000 40.0000000  0.8121212 #> [1]  1.0000000 50.0000000  0.8121212 #> [1]  1.0000000 60.0000000  0.8121212 #> [1]  1.0000000 70.0000000  0.8121212 #> [1]  1.0000000 80.0000000  0.8121212 #> [1]  1.0000000 90.0000000  0.8121212 #> [1]   1.0000000 100.0000000   0.8121212 #>  [1] 0.8121212 0.8121212 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [8] 0.0000000 0.0000000 0.0000000 #> 1 row by 3 columns #>      Phase,    Search%,    A-measure #> [1] 2.0000000 0.0000000 0.9945268 #> [1]  2.0000000 10.0000000  0.8121212 #> [1]  2.0000000 20.0000000  0.8121212 #> [1]  2.0000000 30.0000000  0.8121212 #> [1]  2.0000000 40.0000000  0.8121212 #> [1]  2.0000000 50.0000000  0.8121212 #> [1]  2.0000000 60.0000000  0.8121212 #> [1]  2.0000000 70.0000000  0.8121212 #> [1]  2.0000000 80.0000000  0.8121212 #> [1]  2.0000000 90.0000000  0.8121212 #> [1]   2.0000000 100.0000000   0.8121212 #>  [1] 0.8121212 0.8121212 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>  [8] 0.0000000 0.0000000 0.0000000 head(rcD) #>      unique_id plot    geno entry row column rep #> 1 7cdc7933e2e9    1       C     3   1      1   1 #> 2 1c524f469821    2  Shangi     5   2      1   1 #> 3 05f317e9230f    3       A     1   3      1   2 #> 4 31b0995ed230    4 Sagitta     6   4      1   2 #> 5 e0c3cbbee2a5    5       D     4   5      1   3 #> 6 a7682df8f893    6       B     2   6      1   3"},{"path":"/reference/rand_Prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Partially replicated field design — rand_Prep","title":"Partially replicated field design — rand_Prep","text":"Partially replicated field design","code":""},{"path":"/reference/rand_Prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partially replicated field design — rand_Prep","text":"","code":"rand_Prep(   tot,   ins,   rowD,   trial,   n_dummies,   loc,   totReps,   trtrepP,   trtgroup,   block_lst,   season = \"season-2024-2025\",   path = rand_dir,   check = c(\"Shangi\", \"Unica\", \"Sagitta\", \"Sherekea\"),   dummy = c(\"Unica\", \"Shangi\"),   to_add = 4 )"},{"path":"/reference/rand_Prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partially replicated field design — rand_Prep","text":"tot integer. total number unique clones/genotypes randomized field ins character vector genotypes rowD integer. number rows field trial character. trial name n_dummies integer. number dummies complete rectangular layout loc character. trial location totReps integer. total number plots: row col trtrepP numeric vector. replications ins trtgroup numeric vector. replication treatment groups. samilar repliction trtrepP block_lst list specifying blocking field season season trial path character specifying path write design check character vector checks fill rectangular grid dummy character vector dummy checks fill rectangular grid to_add integer. number checks add complete rectangular grid","code":""},{"path":"/reference/read_accessions.html","id":null,"dir":"Reference","previous_headings":"","what":"read accession files that have been fixed and confirmed correct — read_accessions","title":"read accession files that have been fixed and confirmed correct — read_accessions","text":"read accession files fixed confirmed correct","code":""},{"path":"/reference/read_accessions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read accession files that have been fixed and confirmed correct — read_accessions","text":"","code":"read_accessions(dir = out_dir)"},{"path":"/reference/read_accessions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read accession files that have been fixed and confirmed correct — read_accessions","text":"dir character vector path accession files","code":""},{"path":"/reference/read_accessions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read accession files that have been fixed and confirmed correct — read_accessions","text":"dataframe fixed accession names","code":""},{"path":"/reference/read_workbooks.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for readr's read_csv & readxl's read_excel for reading trial data — read_workbooks","title":"A wrapper for readr's read_csv & readxl's read_excel for reading trial data — read_workbooks","text":"wrapper readr's read_csv & readxl's read_excel reading trial data","code":""},{"path":"/reference/read_workbooks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for readr's read_csv & readxl's read_excel for reading trial data — read_workbooks","text":"","code":"read_workbooks(   dir = t_dir,   season = NULL,   read_subfolder = FALSE,   s = \".csv|.xlsx\",   sub_folder = \"Data/Curated Data\",   subset = FALSE,   n = NULL,   multiple = FALSE,   sheet_name = NULL,   skip = 0,   file_to_read = NULL )"},{"path":"/reference/read_workbooks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for readr's read_csv & readxl's read_excel for reading trial data — read_workbooks","text":"dir trial data home directory season trial season read_subfolder logical. TRUE data lives inside subfolder season s regular expression used keep relevant files sub_folder character subfolder containing data e.g \"Data/Curated Data\" subset ogical. TRUE want read just subset files n integer. Number files subset e.g, 1, -1 1:4. multiple logical. TRUE want read nultiple excel sheets workbook sheet_name character. used specify excel sheet name interest, e.g., \"fieldbook\" skip integer. number rows skip reading data excel workbook file_to_read character.file name read e.g., generated system.file()","code":""},{"path":"/reference/read_workbooks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for readr's read_csv & readxl's read_excel for reading trial data — read_workbooks","text":"list trial dataframes","code":""},{"path":"/reference/read_workbooks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A wrapper for readr's read_csv & readxl's read_excel for reading trial data — read_workbooks","text":"","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") d <- read_workbooks(dir = NULL, file_to_read = f) #> Rows: 108 Columns: 32 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (8): unique, geno, flowering_date, flower_colour, flesh_colour, skin_co... #> dbl (24): plot, entry, row, col, rep, ntp, npe, growth_speed, pgh, plant_uni... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. lapply(d, function(x) x[1:5, 1:5]) #> $`uon-trial-1` #>           unique plot          geno entry row #> 1 1CIP317004.001    1 CIP317004.001    12   1 #> 2 2CIP317005.036    2 CIP317005.036    14   2 #> 3 3CIP317007.103    3 CIP317007.103    20   3 #> 4 4CIP317013.120    4 CIP317013.120    23   4 #> 5 5CIP317026.004    5 CIP317026.004    28   5 #>"},{"path":"/reference/recode_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Coarce variable to numeric or character — recode_var","title":"Coarce variable to numeric or character — recode_var","text":"Coarce variable numeric character","code":""},{"path":"/reference/recode_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coarce variable to numeric or character — recode_var","text":"","code":"recode_var(   x,   to_num = c(\"plot\", \"tuber_size_mm\", \"rep\", \"row\", \"col\", \"yield\"),   to_char = c(\"flowering_date|obs|^note\") )"},{"path":"/reference/recode_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coarce variable to numeric or character — recode_var","text":"x dataframe to_num columns coerce numeric to_char columns coerce character","code":""},{"path":"/reference/recode_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coarce variable to numeric or character — recode_var","text":"dataframe","code":""},{"path":"/reference/recode_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coarce variable to numeric or character — recode_var","text":"","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir = NULL, file_to_read = f) %>% `[[`(1) #> Rows: 108 Columns: 32 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (8): unique, geno, flowering_date, flower_colour, flesh_colour, skin_co... #> dbl (24): plot, entry, row, col, rep, ntp, npe, growth_speed, pgh, plant_uni... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. df_c <- recode_var(df)"},{"path":"/reference/rename_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"rename data columns to conform to ontology labels — rename_cols","title":"rename data columns to conform to ontology labels — rename_cols","text":"rename data columns conform ontology labels","code":""},{"path":"/reference/rename_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rename data columns to conform to ontology labels — rename_cols","text":"","code":"rename_cols(x)"},{"path":"/reference/rename_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rename data columns to conform to ontology labels — rename_cols","text":"x dataframe","code":""},{"path":"/reference/rename_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rename data columns to conform to ontology labels — rename_cols","text":"dataframe","code":""},{"path":"/reference/rename_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rename data columns to conform to ontology labels — rename_cols","text":"","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir = NULL, file_to_read = f) %>%   `[[`(1) #> Rows: 108 Columns: 32 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (8): unique, geno, flowering_date, flower_colour, flesh_colour, skin_co... #> dbl (24): plot, entry, row, col, rep, ntp, npe, growth_speed, pgh, plant_uni... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. df <- rename_cols(df)"},{"path":"/reference/run_checks.html","id":null,"dir":"Reference","previous_headings":"","what":"run data quality checks using {st4gi} functions — run_checks","title":"run data quality checks using {st4gi} functions — run_checks","text":"run data quality checks using {st4gi} functions","code":""},{"path":"/reference/run_checks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"run data quality checks using {st4gi} functions — run_checks","text":"","code":"run_checks(x, sz = 10000, btwn = 0.75, within = 0.3, ...)"},{"path":"/reference/run_checks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"run data quality checks using {st4gi} functions — run_checks","text":"x dataframe sz size farm, taken 10000 sq metres btwn spacing ridges metres within spacing plants ridge metres ... additional arguments","code":""},{"path":"/reference/run_checks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"run data quality checks using {st4gi} functions — run_checks","text":"dataframe","code":""},{"path":"/reference/run_checks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"run data quality checks using {st4gi} functions — run_checks","text":"","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir = NULL, file_to_read = f) %>%   `[[`(1) #> Rows: 108 Columns: 32 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (8): unique, geno, flowering_date, flower_colour, flesh_colour, skin_co... #> dbl (24): plot, entry, row, col, rep, ntp, npe, growth_speed, pgh, plant_uni... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. df_checked <- run_checks(df) #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"flesh_colour\", \"skin_colour\", \"late_blight_60_days\", \"notes\", \"photo\") #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"flesh_colour\", \"skin_colour\", \"late_blight_60_days\", \"notes\", \"photo\") #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"flesh_colour\", \"skin_colour\", \"late_blight_60_days\", \"notes\", \"photo\") #> Warning: Rows with out of scale values replaced with NA for variable nmtp: 54  #> Warning: Rows with out of scale values replaced with NA for variable nmtci: 54  #> Warning: Rows with out of scale values replaced with NA for variable nmtcii: 54  #> Warning: Rows with out of scale values replaced with NA for variable tntp: 54  #> Warning: Rows with extreme values replaced with NA for variable atmw: 54  #> Warning: Rows with extreme values replaced with NA for variable atw: 54  #> Warning: Rows with extreme values replaced with NA for variable mtwp: 54  #> Warning: Rows with extreme values replaced with NA for variable mtwcii: 54  #> Warning: Rows with extreme values replaced with NA for variable mtyna: 54  #> Warning: Rows with extreme values replaced with NA for variable ttwp: 54  #> Warning: Rows with extreme values replaced with NA for variable ttyna: 54"},{"path":"/reference/run_data_processes.html","id":null,"dir":"Reference","previous_headings":"","what":"compute derived phenotypic variables — run_data_processes","title":"compute derived phenotypic variables — run_data_processes","text":"compute derived phenotypic variables","code":""},{"path":"/reference/run_data_processes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compute derived phenotypic variables — run_data_processes","text":"","code":"run_data_processes(x, sz = 10000, btwn = 0.75, within = 0.3)"},{"path":"/reference/run_data_processes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compute derived phenotypic variables — run_data_processes","text":"x dataframe sz size farm, taken 10000 sq metres btwn spacing ridges metres within spacing plants ridge metres","code":""},{"path":"/reference/run_data_processes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compute derived phenotypic variables — run_data_processes","text":"dataframe","code":""},{"path":"/reference/run_data_processes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"compute derived phenotypic variables — run_data_processes","text":"","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir = NULL, file_to_read = f)  #> Rows: 108 Columns: 32 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (8): unique, geno, flowering_date, flower_colour, flesh_colour, skin_co... #> dbl (24): plot, entry, row, col, rep, ntp, npe, growth_speed, pgh, plant_uni... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. df_out <- pre_process_trials(df) |> process_trials() %>%   purrr::map(., run_data_processes) #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Joining with `by = join_by(old_family_code)` #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"flesh_colour\", \"skin_colour\", \"late_blight_60_days\", \"obs\", \"photo\") #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"flesh_colour\", \"skin_colour\", \"late_blight_60_days\", \"obs\", \"photo\") #> Warning: Some variables have been overwritten: c(\"mtwp\", \"nmtp\") #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"flesh_colour\", \"skin_colour\", \"late_blight_60_days\", \"obs\", \"photo\") #> Warning: Rows with out of scale values replaced with NA for variable nmtp: 54  #> Warning: Rows with out of scale values replaced with NA for variable nmtci: 54  #> Warning: Rows with out of scale values replaced with NA for variable nmtcii: 54  #> Warning: Rows with out of scale values replaced with NA for variable tntp: 54  #> Warning: Rows with extreme values replaced with NA for variable atmw: 54  #> Warning: Rows with extreme values replaced with NA for variable atw: 54  #> Warning: Rows with extreme values replaced with NA for variable mtwp: 54  #> Warning: Rows with extreme values replaced with NA for variable mtwcii: 54  #> Warning: Rows with extreme values replaced with NA for variable mtyna: 54  #> Warning: Rows with extreme values replaced with NA for variable ttwp: 54  #> Warning: Rows with extreme values replaced with NA for variable ttyna: 54  #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"late_blight_60_days\", \"obs\", \"photo\") #> Warning: Some variables have been overwritten: c(\"mtwp\", \"ttwp\", \"nmtp\", \"tntp\", \"atmw\", \"atw\", \"ppe\", \"mtyna\", \"ttyna\") #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"late_blight_60_days\", \"obs\", \"photo\") #> Warning: Rows with out of scale values replaced with NA for variable tbfsh1: 1 2 3 4 5 6 19 20 21 22 23 24 37 38 39 40 41 42 55 56 57 58 59 60 73 74 75 76 77 78 91 92 93 94 95 96  #> Warning: Rows with out of scale values replaced with NA for variable tbskn1: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108  #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"late_blight_60_days\", \"obs\", \"photo\") #> Warning: Some variables have been overwritten: c(\"mtwp\", \"ttwp\", \"nmtp\", \"tntp\", \"atmw\", \"atw\", \"ppe\", \"mtyna\", \"ttyna\") #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"late_blight_60_days\", \"obs\", \"photo\") purrr::map(df_out, names_df) #> $`uon-trial-1` #>  [1] \"atmw\"                \"atw\"                 \"col\"                 #>  [4] \"entry\"               \"flower_colour\"       \"flowering\"           #>  [7] \"flowering_date\"      \"geno\"                \"growth_speed\"        #> [10] \"late_blight_60_days\" \"mtwci\"               \"mtwcii\"              #> [13] \"mtwp\"                \"mtyna\"               \"nmtci\"               #> [16] \"nmtcii\"              \"nmtp\"                \"nnomtp\"              #> [19] \"nomtwp\"              \"npe\"                 \"ntp\"                 #> [22] \"obs\"                 \"overall_impression\"  \"pgh\"                 #> [25] \"photo\"               \"plant_unif\"          \"plant_vigor\"         #> [28] \"plot\"                \"ppe\"                 \"rep\"                 #> [31] \"row\"                 \"se\"                  \"tbfsh1\"              #> [34] \"tbskn1\"              \"tntp\"                \"ttwp\"                #> [37] \"ttyna\"               \"tub_size\"            \"tub_unif\"            #> [40] \"tuber_apper\"         \"unique\"              #>"},{"path":"/reference/select_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for dplyr::select function — select_cols","title":"A wrapper for dplyr::select function — select_cols","text":"wrapper dplyr::select function","code":""},{"path":"/reference/select_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for dplyr::select function — select_cols","text":"","code":"select_cols(x, cols)"},{"path":"/reference/select_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for dplyr::select function — select_cols","text":"x dataframe cols character vector column names","code":""},{"path":"/reference/select_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for dplyr::select function — select_cols","text":"dataframe","code":""},{"path":"/reference/subset_invalid_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"get invalid names (labels not in ontology) & add geno — subset_invalid_cols","title":"get invalid names (labels not in ontology) & add geno — subset_invalid_cols","text":"get invalid names (labels ontology) & add geno","code":""},{"path":"/reference/subset_invalid_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get invalid names (labels not in ontology) & add geno — subset_invalid_cols","text":"","code":"subset_invalid_cols(x)"},{"path":"/reference/subset_invalid_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get invalid names (labels not in ontology) & add geno — subset_invalid_cols","text":"x dataframe","code":""},{"path":"/reference/subset_invalid_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get invalid names (labels not in ontology) & add geno — subset_invalid_cols","text":"dataframe","code":""},{"path":"/reference/subset_invalid_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get invalid names (labels not in ontology) & add geno — subset_invalid_cols","text":"","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir = NULL, file_to_read = f) %>%   purrr::map(     ., ~dplyr::mutate(       ., year = \"2024\", loc = \"UON\", trial = \"lbht\"     )   ) #> Rows: 108 Columns: 32 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (8): unique, geno, flowering_date, flower_colour, flesh_colour, skin_co... #> dbl (24): plot, entry, row, col, rep, ntp, npe, growth_speed, pgh, plant_uni... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. df_out <- pre_process_trials(df) |> process_trials() %>%   purrr::map(., run_data_processes) %>% `[[`(1)  #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Joining with `by = join_by(old_family_code)` #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"flesh_colour\", \"skin_colour\", \"late_blight_60_days\", \"obs\", \"photo\", \"trial\") #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"flesh_colour\", \"skin_colour\", \"late_blight_60_days\", \"obs\", \"photo\", \"trial\") #> Warning: Some variables have been overwritten: c(\"mtwp\", \"nmtp\") #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"flesh_colour\", \"skin_colour\", \"late_blight_60_days\", \"obs\", \"photo\", \"trial\") #> Warning: Rows with out of scale values replaced with NA for variable nmtp: 54  #> Warning: Rows with out of scale values replaced with NA for variable nmtci: 54  #> Warning: Rows with out of scale values replaced with NA for variable nmtcii: 54  #> Warning: Rows with out of scale values replaced with NA for variable tntp: 54  #> Warning: Rows with extreme values replaced with NA for variable atmw: 54  #> Warning: Rows with extreme values replaced with NA for variable atw: 54  #> Warning: Rows with extreme values replaced with NA for variable mtwp: 54  #> Warning: Rows with extreme values replaced with NA for variable mtwcii: 54  #> Warning: Rows with extreme values replaced with NA for variable mtyna: 54  #> Warning: Rows with extreme values replaced with NA for variable ttwp: 54  #> Warning: Rows with extreme values replaced with NA for variable ttyna: 54  #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"late_blight_60_days\", \"obs\", \"photo\", \"trial\") #> Warning: Some variables have been overwritten: c(\"mtwp\", \"ttwp\", \"nmtp\", \"tntp\", \"atmw\", \"atw\", \"ppe\", \"mtyna\", \"ttyna\") #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"late_blight_60_days\", \"obs\", \"photo\", \"trial\") #> Warning: Rows with out of scale values replaced with NA for variable tbfsh1: 1 2 3 4 5 6 19 20 21 22 23 24 37 38 39 40 41 42 55 56 57 58 59 60 73 74 75 76 77 78 91 92 93 94 95 96  #> Warning: Rows with out of scale values replaced with NA for variable tbskn1: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108  #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"late_blight_60_days\", \"obs\", \"photo\", \"trial\") #> Warning: Some variables have been overwritten: c(\"mtwp\", \"ttwp\", \"nmtp\", \"tntp\", \"atmw\", \"atw\", \"ppe\", \"mtyna\", \"ttyna\") #> Warning: pt crop detected #> Warning: Some columns with invalid names: c(\"unique\", \"entry\", \"growth_speed\", \"flowering_date\", \"flower_colour\", \"overall_impression\", \"late_blight_60_days\", \"obs\", \"photo\", \"trial\")  subset_invalid_cols(df_out) %>% colnames(.) #> Warning: pt crop detected #>  [1] \"geno\"                \"unique\"              \"entry\"               #>  [4] \"growth_speed\"        \"flowering_date\"      \"flower_colour\"       #>  [7] \"overall_impression\"  \"late_blight_60_days\" \"obs\"                 #> [10] \"photo\"               \"trial\""},{"path":"/reference/sum_rowwise.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr::rowwise sum target columns — sum_rowwise","title":"dplyr::rowwise sum target columns — sum_rowwise","text":"dplyr::rowwise sum target columns","code":""},{"path":"/reference/sum_rowwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dplyr::rowwise sum target columns — sum_rowwise","text":"","code":"sum_rowwise(x, target_cols)"},{"path":"/reference/sum_rowwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dplyr::rowwise sum target columns — sum_rowwise","text":"x dataframe target_cols character vector column names","code":""},{"path":"/reference/sum_rowwise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dplyr::rowwise sum target columns — sum_rowwise","text":"dataframe","code":""},{"path":"/reference/trial_design_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"generate trial design inputs i.e., geno replications and blocking list — trial_design_meta","title":"generate trial design inputs i.e., geno replications and blocking list — trial_design_meta","text":"generate trial design inputs .e., geno replications blocking list","code":""},{"path":"/reference/trial_design_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate trial design inputs i.e., geno replications and blocking list — trial_design_meta","text":"","code":"trial_design_meta(   trep = rep(c(3, 2, 1, 5), c(6, 11, 36, 4)),   trgroup = rep(c(3, 2, 1, 5), c(6, 11, 36, 4)),   block_list = list(c(6, 4), c(6, 2)) )"},{"path":"/reference/trial_design_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate trial design inputs i.e., geno replications and blocking list — trial_design_meta","text":"trep numeric vector treatment/genotype replications trgroup numeric vector treatment group replication block_list list blocking field layout","code":""},{"path":"/reference/trial_design_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate trial design inputs i.e., geno replications and blocking list — trial_design_meta","text":"list","code":""},{"path":"/reference/trial_design_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate trial design inputs i.e., geno replications and blocking list — trial_design_meta","text":"","code":"d <- tempdir() data(\"ilri\", package = \"pbwrangler\") ins_ilri <- geno_by_tubers(ilri) ilri_prep <- rand_Prep(   tot = 53,   ins = ins_ilri,   rowD = 12,   trial = \"ilri\",   n_dummies = 5,   loc = \"ilri\",   totReps =96,   trtrepP = trial_design_meta()$trep,   trtgroup = trial_design_meta()$trgroup,   block_lst = trial_design_meta()$block_list,   path = NULL ) #>      Phase,    Search%,    A-measure #> [1] 1.0000000 0.0000000 0.2718985 #> [1]  1.0000000 10.0000000  0.2666667 #> [1]  1.0000000 20.0000000  0.2666667 #> [1]  1.0000000 30.0000000  0.2666667 #> [1]  1.0000000 40.0000000  0.2666667 #> [1]  1.0000000 50.0000000  0.2666667 #> [1]  1.0000000 60.0000000  0.2666667 #> [1]  1.0000000 70.0000000  0.2666667 #> [1]  1.0000000 80.0000000  0.2666667 #> [1]  1.0000000 90.0000000  0.2666667 #> [1]   1.0000000 100.0000000   0.2666667 #>  [1] 0.2666667 0.2666667 0.2666667 0.0000000 0.0000000 0.0000000 0.0000000 #>  [8] 0.0000000 0.0000000 0.0000000 #> 8 rows by 2 columns #>      Phase,    Search%,    A-measure #> [1] 2.0000000 0.0000000 0.2700262 #> [1]  2.0000000 10.0000000  0.2700262 #> [1]  2.0000000 20.0000000  0.2700262 #> [1]  2.0000000 30.0000000  0.2700262 #> [1]  2.0000000 40.0000000  0.2700262 #> [1]  2.0000000 50.0000000  0.2700262 #> [1]  2.0000000 60.0000000  0.2700262 #> [1]  2.0000000 70.0000000  0.2700262 #> [1]  2.0000000 80.0000000  0.2700262 #> [1]  2.0000000 90.0000000  0.2700262 #> [1]   2.0000000 100.0000000   0.2700262 #>  [1] 0.2666667 0.2834646 0.2700262 0.0000000 0.0000000 0.0000000 0.0000000 #>  [8] 0.0000000 0.0000000 0.0000000 #>      Phase,    Search%,    A-measure #> [1] 1.0000000 0.0000000 0.7591574 #> [1]  1.0000000 10.0000000  0.7437399 #> [1]  1.0000000 20.0000000  0.7437399 #> [1]  1.0000000 30.0000000  0.7437399 #> [1]  1.0000000 40.0000000  0.7437399 #> [1]  1.0000000 50.0000000  0.7437399 #> [1]  1.0000000 60.0000000  0.7437399 #> [1]  1.0000000 70.0000000  0.7437399 #> [1]  1.0000000 80.0000000  0.7437399 #> [1]  1.0000000 90.0000000  0.7437399 #> [1]   1.0000000 100.0000000   0.7437399 #>  [1] 0.7390377 0.7625489 0.7437399 0.0000000 0.0000000 0.0000000 0.0000000 #>  [8] 0.0000000 0.0000000 0.0000000 #> 8 rows by 2 columns #>      Phase,    Search%,    A-measure #> [1] 2.0000000 0.0000000 0.7842118 #> [1]  2.0000000 10.0000000  0.7717472 #> [1]  2.0000000 20.0000000  0.7717472 #> [1]  2.0000000 30.0000000  0.7717472 #> [1]  2.0000000 40.0000000  0.7717472 #> [1]  2.0000000 50.0000000  0.7716664 #> [1]  2.0000000 60.0000000  0.7716664 #> [1]  2.0000000 70.0000000  0.7716664 #> [1]  2.0000000 80.0000000  0.7716664 #> [1]  2.0000000 90.0000000  0.7716664 #> [1]   2.0000000 100.0000000   0.7716664 #>  [1] 0.7593699 0.8208523 0.7716664 0.0000000 0.0000000 0.0000000 0.0000000 #>  [8] 0.0000000 0.0000000 0.0000000 #> [1] \"#####################################\" #> [1] \"# Final search has not yet been run #\" #> [1] \"#####################################\" #>      Phase,    Search%,    A-measure #> [1] 1.000000 0.000000 1.896849 #> [1]  1.000000 10.000000  1.756136 #> [1]  1.00000 20.00000  1.69891 #> [1]  1.000000 30.000000  1.679198 #> [1]  1.000000 40.000000  1.656411 #> [1]  1.000000 50.000000  1.633088 #> [1]  1.000000 60.000000  1.620262 #> [1]  1.000000 70.000000  1.613022 #> [1]  1.000000 80.000000  1.600019 #> [1]  1.000000 90.000000  1.590032 #> [1]   1.000000 100.000000   1.590032 #>  [1] 1.590032 1.590032 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 #>  [9] 0.000000 0.000000 head(ilri_prep) #>      unique_id unit          geno entry row range rep #> 1 8c87863e08d4    1 CIP319052.004    38   1     1   1 #> 2 578acf91e4f9    2 CIP319040.006    13   2     1   1 #> 3 3c97bff66d3f    3 CIP319020.002    21   3     1   1 #> 4 1f3d474f2401    4       Sagitta    56   4     1   1 #> 5 f4905d088a31    5 CIP319020.004     9   5     1   1 #> 6 c37a225b768f    6 CIP319064.006    47   6     1   1"},{"path":"/reference/update_geno.html","id":null,"dir":"Reference","previous_headings":"","what":"Update accession names to conform to naming convention — update_geno","title":"Update accession names to conform to naming convention — update_geno","text":"Update accession names conform naming convention","code":""},{"path":"/reference/update_geno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update accession names to conform to naming convention — update_geno","text":"","code":"update_geno(x)"},{"path":"/reference/update_geno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update accession names to conform to naming convention — update_geno","text":"x dataframe","code":""},{"path":"/reference/update_geno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update accession names to conform to naming convention — update_geno","text":"dataframe","code":""},{"path":"/reference/update_geno.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update accession names to conform to naming convention — update_geno","text":"","code":"f <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\") df <- read_workbooks(dir = NULL, file_to_read = f) %>%   `[[`(1) #> Rows: 108 Columns: 32 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (8): unique, geno, flowering_date, flower_colour, flesh_colour, skin_co... #> dbl (24): plot, entry, row, col, rep, ntp, npe, growth_speed, pgh, plant_uni... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. df_checked <- update_geno(df) #> Joining with `by = join_by(old_family_code)`"},{"path":"/reference/write_data.html","id":null,"dir":"Reference","previous_headings":"","what":"write processed trial data to a directory — write_data","title":"write processed trial data to a directory — write_data","text":"write processed trial data directory","code":""},{"path":"/reference/write_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"write processed trial data to a directory — write_data","text":"","code":"write_data(dir = b_out_dir, data_list, season)"},{"path":"/reference/write_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"write processed trial data to a directory — write_data","text":"dir destination directory/folder write data_list list processed trial data season trial season","code":""},{"path":"/reference/write_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"write processed trial data to a directory — write_data","text":"","code":"f <- system.file(\"uon-trial-1.xlsx\", package = \"pbwrangler\") f1 <- system.file(\"uon-trial-1.csv\", package = \"pbwrangler\")  df <- read_workbooks(dir = NULL, file_to_read = f, sheet_name = \"Sheet 1\") df1 <- read_workbooks(dir = NULL, file_to_read = f1) #> Rows: 108 Columns: 32 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (8): unique, geno, flowering_date, flower_colour, flesh_colour, skin_co... #> dbl (24): plot, entry, row, col, rep, ntp, npe, growth_speed, pgh, plant_uni... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. dat <- c(df, df1)  write_data(dir = tempdir(), data_list = dat, season = \"season-2024\")"},{"path":"/reference/write_season_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Write out data for pre-processed experimental data by calling write_trials() — write_season_data","title":"Write out data for pre-processed experimental data by calling write_trials() — write_season_data","text":"Write data pre-processed experimental data calling write_trials()","code":""},{"path":"/reference/write_season_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write out data for pre-processed experimental data by calling write_trials() — write_season_data","text":"","code":"write_season_data(list_df, season)"},{"path":"/reference/write_season_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write out data for pre-processed experimental data by calling write_trials() — write_season_data","text":"list_df list data frames season seasson experiments","code":""},{"path":[]},{"path":"/reference/write_trials.html","id":null,"dir":"Reference","previous_headings":"","what":"write out trial data — write_trials","title":"write out trial data — write_trials","text":"write trial data","code":""},{"path":"/reference/write_trials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"write out trial data — write_trials","text":"","code":"write_trials(x, season, is_invalid = FALSE, dir = out_dir)"},{"path":"/reference/write_trials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"write out trial data — write_trials","text":"x list trial data season trial season is_invalid logical: select invalid columns defined crop ontology dir output directory","code":""},{"path":"/news/index.html","id":"pbwrangler-development-version","dir":"Changelog","previous_headings":"","what":"pbwrangler (development version)","title":"pbwrangler (development version)","text":"Initial CRAN submission.","code":""}]
